{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Overview","text":"Shell Script Documentation <p>Write documentation in comments and render it with templates.</p> <p> </p> <p><code>shellman</code> can generate man pages, wiki pages and help text using documentation written in shell scripts comments.</p> <p>For example:</p> <pre><code>#!/bin/bash\n\n## \\brief Just a demo\n## \\desc This script actually does nothing.\n\nmain() {\n  case \"$1\" in\n    ## \\option -h, --help\n    ## Print this help and exit.\n    -h|--help) shellman \"$0\"; exit 0 ;;\n  esac\n}\n\n## \\usage demo [-h]\nmain \"$@\"\n</code></pre> <p>Output when calling <code>./demo -h</code>:</p> <pre><code>Usage: demo [-h]\n\nThis script actually does nothing.\n\nOptions:\n  -h, --help            Print this help and exit.\n</code></pre> <p>You can see more examples in the documentation: https://pawamoy.github.io/shellman/.</p> Demo <p></p> <p>In the demo above we saw the three builtin templates: helptext, manpage and wikipage.</p> <p>You can use your own templates by specifying them with the <code>--template path:my/template</code> syntax.</p> <p>You can also write a plugin, see the docs: https://pawamoy.github.io/shellman/plugins.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install shellman\n</code></pre> <p>With <code>uv</code>:</p> <pre><code>uv tool install shellman\n</code></pre>"},{"location":"#some-projects-using-shellman","title":"Some projects using shellman","text":"<ul> <li>shellm \u2014   A collection of scripts and libraries   built on a core inclusion-system,   all installable with basher.   Here are a few examples:</li> <li>daemon \u2014     A library that facilitates the writing of daemonized scripts that consume     files in a watched directory.</li> <li>debug \u2014     A simple script that sets the verbose/dry-run/debug     Bash flags before running another script.</li> <li>format \u2014     Format your output with style and color.</li> <li>home \u2014     A home for your shell scripts! </li> <li>loop \u2014     Control the flow of your loops (pause/resume/etc.).</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#102-2025-03-27","title":"1.0.2 - 2025-03-27","text":"<p>Compare with 1.0.1</p>"},{"location":"changelog/#deprecations","title":"Deprecations","text":"<p>Submodules are deprecated, import from the top-level <code>shellman</code> module instead.</p>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Return correct tag instances from <code>from_lines</code>, fixing parsing of <code>file</code> tags (value and description) (e597d9d by Timoth\u00e9e Mazzucotelli). Issue-mkdocstrings-shell-3</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Re-expose submodules as deprecated (c8f6676 by Timoth\u00e9e Mazzucotelli).</li> <li>Move submodules under internal folder, sync API and docs (60de99f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#101-2024-11-25","title":"1.0.1 - 2024-11-25","text":"<p>Compare with 1.0.0</p>"},{"location":"changelog/#build","title":"Build","text":"<ul> <li>Drop support for Python 3.8 (3675ff8 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Add missing rendering of functions stdin/stdout/stderr (d7fc017 by Timoth\u00e9e Mazzucotelli). Issue-37</li> </ul>"},{"location":"changelog/#100-2023-09-03","title":"1.0.0 - 2023-09-03","text":"<p>Compare with 0.4.1</p> <p>It has been a long time since the last release, and the last time I worked on this project. I've updated the project with my latest template. Support for Python 2 is dropped. I took the opportunity to privatize most of the API. I'll see in a later version if there is a need to expose a main <code>parse</code> function or similar, to extract information from a given file.</p>"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":"<ul> <li><code>shellman.reader.DocLine.doc_type</code>: Public object points to a different kind of object: function -&gt; attribute</li> <li><code>shellman.reader.preprocess_stream</code>: Public object was removed</li> <li><code>shellman.reader.preprocess_lines</code>: Public object was removed</li> <li><code>shellman.reader.process_blocks</code>: Public object was removed</li> <li><code>shellman.reader.merge</code>: Public object was removed</li> <li><code>shellman.context.get_cli_context</code>: Public object was removed</li> <li><code>shellman.context.get_env_context</code>: Public object was removed</li> <li><code>shellman.context.get_file_context</code>: Public object was removed</li> <li><code>shellman.context.get_context</code>: Public object was removed</li> <li><code>shellman.context.update</code>: Public object was removed</li> <li><code>shellman.cli.get_context</code>: Public object was removed</li> <li><code>shellman.cli.update</code>: Public object was removed</li> <li><code>shellman.cli.merge</code>: Public object was removed</li> <li><code>shellman.cli.valid_file</code>: Public object was removed</li> <li><code>shellman.cli.render</code>: Public object was removed</li> <li><code>shellman.cli.write</code>: Public object was removed</li> <li><code>shellman.cli.common_ancestor</code>: Public object was removed</li> <li><code>shellman.cli.is_format_string</code>: Public object was removed</li> <li><code>shellman.cli.guess_filename</code>: Public object was removed</li> <li><code>shellman.cli.output_name_variables</code>: Public object was removed</li> <li><code>shellman.cli.get_vcs_root</code>: Public object was removed</li> <li><code>shellman.cli.main(argv)</code>: Parameter was removed</li> <li><code>shellman.templates.get_builtin_path</code>: Public object was removed</li> <li><code>shellman.templates.get_env</code>: Public object was removed</li> <li><code>shellman.templates.get_custom_template</code>: Public object was removed</li> <li><code>shellman.templates.load_plugin_templates</code>: Public object was removed</li> <li><code>shellman.templates.names</code>: Public object was removed</li> <li><code>shellman.templates.parser_choices</code>: Public object was removed</li> <li><code>shellman.templates.filters.do_groffauto(escape)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>shellman.templates.filters.do_smartwrap(indentfirst)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> <li><code>shellman.templates.filters.do_format(string)</code>: Parameter was added as required</li> <li><code>shellman.templates.filters.do_groupby(sort)</code>: Parameter kind was changed: positional or keyword -&gt; keyword-only</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Update for Python 3 and new versions of dependencies (e16c46f by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Rewrite tag classes as dataclasses (f1780d4 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"changelog/#041-2018-10-10","title":"0.4.1 - 2018-10-10","text":"<p>Compare with 0.4.0</p>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fix <code>body</code> filter for Python 2 (ce7d0ef).</li> </ul>"},{"location":"changelog/#040-2018-09-28","title":"0.4.0 - 2018-09-28","text":"<p>Compare with 0.3.4</p>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Add context variable to avoid escaping lines starting with given values (742e023).</li> <li>Add usagetext template (a7c20fc).</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fix escape filter condition (f32cd43).</li> <li>Fix python 2 unicode decode error (0040028).</li> <li>Fix variables for output (01155fb).</li> </ul>"},{"location":"changelog/#misc","title":"Misc","text":"<ul> <li>Improve error messages (96ebb68).</li> </ul>"},{"location":"changelog/#034-2018-09-22","title":"0.3.4 - 2018-09-22","text":"<p>Compare with 0.3.3</p>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Fix writing UTF-8 contents to file for Python 2 (9e99b23).</li> </ul>"},{"location":"changelog/#misc_1","title":"Misc","text":"<ul> <li>Improve credits line (f7a7cae).</li> </ul>"},{"location":"changelog/#033-2018-09-18","title":"0.3.3 - 2018-09-18","text":"<p>Compare with 0.3.2</p>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Fix manifest (missing setup.py) (62ccfaf).</li> </ul>"},{"location":"changelog/#032-2018-09-18","title":"0.3.2 - 2018-09-18","text":"<p>Compare with 0.3.1</p>"},{"location":"changelog/#misc_2","title":"Misc","text":"<ul> <li>Add logo and demo.svg to fix PyPI page (1e06662).</li> </ul>"},{"location":"changelog/#031-2018-09-18","title":"0.3.1 - 2018-09-18","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#misc_3","title":"Misc","text":"<ul> <li>Reduce size of package, simplify manifest (f123b53).</li> <li>Switch documents to markdown (f3917e9).</li> </ul>"},{"location":"changelog/#030-2018-09-17","title":"0.3.0 - 2018-09-17","text":"<p>Compare with 0.2.2</p>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Add credits in wikipage template (e70b7c8).</li> <li>Add groupby_unsorted filter to improve option rendering (2e42177).</li> <li>Add logo (f9289a0).</li> <li>Add new reader module (ea13cfb).</li> <li>Add option to smart_width to indent first line or not (e625afb).</li> <li>Add vcsroot name variable (f5db3b3).</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Change README.rst to README.md (4628e76).</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Fix code block (de304ee).</li> <li>Fix credits and readme url to gitlab plugins doc (9958019).</li> <li>Fix get context from env (f1e2296).</li> <li>Fix usage tag (4a47431).</li> <li>Fix wikipage template (2f5a0ad).</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Remove blank line in AUTHORS (e414282).</li> <li>Remove formatter options, enforce user behavior (48c26d0).</li> <li>Remove MPL2.0 notices in sources (now ISC) (87e92df).</li> <li>Remove pyup file, remove option-description subtag (implicit) (4a08fa1).</li> </ul>"},{"location":"changelog/#misc_4","title":"Misc","text":"<ul> <li>Allow failure for style and spell on travis (4a7a60f).</li> <li>Automatically compute indent_str from indent, cast indent to int (0a09554).</li> <li>Handle multiple file input/output, fix some templates vars, format with black (2c6672b).</li> <li>Ignore bandit warning as irrelevant (no html templates) (4947fe5).</li> <li>Implement context abilities (5e7c9d4).</li> <li>Implement plugin abilities (cd4723f).</li> <li>Implement smart_width for text format, write more templates (bb15f51).</li> <li>Improve helptext usage display, fix smartwrap indent (11f78bf).</li> <li>Improve manpage groff template, fix various issues (b829593).</li> <li>Link up with argparse (12f186d).</li> <li>Rename tag to section (5e80735).</li> <li>Update demo script and svg (ec0c282).</li> <li>Update docs, simplify context usage (8c6c950).</li> <li>Use GitLab-CI instead of Travis (de662d0).</li> </ul>"},{"location":"changelog/#022-2017-05-02","title":"0.2.2 - 2017-05-02","text":"<p>Compare with 0.2.1</p>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Change license from MPL 2.0 to ISC (no 'same license' condition) (868b89e).</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Fix cli main return None -&gt; 0 (7beeecc).</li> <li>Fix codacy badge (fe55efb).</li> <li>Fix docs spelling (69988a2).</li> <li>Fix installation instruction (--user does not install entry point...) (aa2037b).</li> <li>Fix man synopsis section (d79db9a).</li> </ul>"},{"location":"changelog/#misc_5","title":"Misc","text":"<ul> <li>Begin to fix output option (f1e5488).</li> <li>Hide sphinx warnings, travis install enchant (c216c78).</li> <li>Use codacy instead of codecov (c024b1c).</li> </ul>"},{"location":"changelog/#021-2016-12-06","title":"0.2.1 - 2016-12-06","text":"<p>Compare with 0.2.0</p>"},{"location":"changelog/#misc_6","title":"Misc","text":"<ul> <li>Update README, fix help display (a131b82).</li> </ul>"},{"location":"changelog/#020-2016-12-06","title":"0.2.0 - 2016-12-06","text":"<p>Compare with first commit</p>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Add check feature, add tests (4916b51).</li> <li>Add demo example (ec78d6b).</li> <li>Add markdown format, improve python3 compatibility, add gitignore (6b8c295).</li> <li>Add tests (4d08087).</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Fix changing release date over upstream update (11738c4).</li> <li>Fix command line usage and tests usage combination (bcef7c9).</li> <li>Fix dangerous warning about sys.argv as default value (effe263).</li> </ul>"},{"location":"changelog/#misc_7","title":"Misc","text":"<ul> <li>Implement new structure (40b4806).</li> <li>Setup tests (5d50692).</li> <li>Write doc (1a8e0e4).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd shellman\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>make run shellman [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build shellman. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License Jinja2 A very fast and expressive template engine. <code>~=3.0, &gt;=3</code> <code>3.1.6</code> BSD License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.2</code> BSD License typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.9, &gt;=4.0</code> <code>4.13.0</code> PSF-2.0"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT babel Internationalization utilities <code>~=2.10</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.8</code> MIT beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.3</code> MIT License build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.26.6</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.1.31</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.1</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.8</code> BSD License colorama Cross-platform colored terminal text. <code>~=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.7.1</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>44.0.2</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.0</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.3</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.44</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.49</code> <code>1.6.3.1.3.1</code> ISC griffe-inherited-docstrings Griffe extension for inheriting docstrings. <code>&gt;=1.1</code> <code>1.1.1</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.2</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>2.1.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.1.0</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>~=3.0, &gt;=3</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>~=3.2</code> <code>3.7</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.10.3.1.1.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.1.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>3.0.2</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>~=1.3</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.1</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.5</code> MIT mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.1</code> <code>0.1.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.9+insiders.4.53.16</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.9</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29</code> <code>0.29.0</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.8.1.12.0</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.6.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.15.0</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.0.0</code> MIT License nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.2.21</code> MIT packaging Core utilities for Python packages <code>&gt;=24.0</code> <code>24.2</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.7</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2</code> <code>1.5.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.19.1</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>~=10.2</code> <code>10.14.3</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.3.5</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2015.7</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.9.4</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.11.2</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.15, &lt;2</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.6</code> MIT twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.3</code> <code>0.2.3</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.7.0.20250322</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20250326</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.9, &gt;=4.0</code> <code>4.13.0</code> PSF-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.3.0</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.4.3</code> ISC <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2020, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"todo/","title":"To do","text":"<p>The work is not finished!</p> <ul> <li> <p>General:</p> <ul> <li> Write missing render functions in formatters</li> <li> Improve text display (handle <code>\\n</code> and terminal size)</li> <li> Checking feature</li> <li> Configuration file?</li> <li> Handle specific numbers for occurrences / lines?</li> <li> Be extensible?</li> </ul> </li> <li> <p>Handle script arguments:</p> <ul> <li> Format</li> <li> Section order</li> <li> Function section order</li> <li> Be nice when checking</li> <li> Warn (or not) when checking</li> <li> Fail at first warning when checking</li> <li> Ignore specific tags when checking</li> </ul> </li> </ul> <p>Pull requests are welcomed!</p>"},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#shellman","title":"shellman","text":"<p>shellman package.</p> <p>Read documentation from shell script comments and render it with templates.</p> <p>shellman reads specified FILEs and searches for special comments beginning with two sharps (##). It extracts documentation from these comment lines, and then generate a document by rendering a template. The template rendering is done with Jinja2. See https://jinja.palletsprojects.com/en/3.1.x/.</p> <p>Modules:</p> <ul> <li> <code>cli</code>           \u2013            <p>Deprecated. Import directly from <code>shellman</code> instead.</p> </li> <li> <code>context</code>           \u2013            <p>Deprecated. Import directly from <code>shellman</code> instead.</p> </li> <li> <code>reader</code>           \u2013            <p>Deprecated. Import directly from <code>shellman</code> instead.</p> </li> <li> <code>tags</code>           \u2013            <p>Deprecated. Import directly from <code>shellman</code> instead.</p> </li> <li> <code>templates</code>           \u2013            <p>Deprecated. Import directly from <code>shellman</code> instead.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>AuthorTag</code>           \u2013            <p>A tag representing an author.</p> </li> <li> <code>BriefTag</code>           \u2013            <p>A tag representing a summary.</p> </li> <li> <code>BugTag</code>           \u2013            <p>A tag representing a bug note.</p> </li> <li> <code>CaveatTag</code>           \u2013            <p>A tag representing caveats.</p> </li> <li> <code>CopyrightTag</code>           \u2013            <p>A tag representing copyright information.</p> </li> <li> <code>DateTag</code>           \u2013            <p>A tag representing a date.</p> </li> <li> <code>DescTag</code>           \u2013            <p>A tag representing a description.</p> </li> <li> <code>DocBlock</code>           \u2013            <p>A documentation block.</p> </li> <li> <code>DocFile</code>           \u2013            <p>A shell script or documentation file.</p> </li> <li> <code>DocLine</code>           \u2013            <p>A documentation line.</p> </li> <li> <code>DocStream</code>           \u2013            <p>A stream of shell code or documentation.</p> </li> <li> <code>DocType</code>           \u2013            <p>Enumeration of the possible types of documentation.</p> </li> <li> <code>EnvTag</code>           \u2013            <p>A tag representing an environment variable used by the script.</p> </li> <li> <code>ErrorTag</code>           \u2013            <p>A tag representing a known error.</p> </li> <li> <code>ExampleTag</code>           \u2013            <p>A tag representing a code/shell example.</p> </li> <li> <code>ExitTag</code>           \u2013            <p>A tag representing an exit code.</p> </li> <li> <code>FileTag</code>           \u2013            <p>A tag representing a file used by a script.</p> </li> <li> <code>FunctionTag</code>           \u2013            <p>A tag representing a shell function.</p> </li> <li> <code>HistoryTag</code>           \u2013            <p>A tag representing a script's history.</p> </li> <li> <code>LicenseTag</code>           \u2013            <p>A tag representing a license.</p> </li> <li> <code>NoteTag</code>           \u2013            <p>A tag representing a note.</p> </li> <li> <code>OptionTag</code>           \u2013            <p>A tag representing a command-line option.</p> </li> <li> <code>SeealsoTag</code>           \u2013            <p>A tag representing \"See Also\" information.</p> </li> <li> <code>StderrTag</code>           \u2013            <p>A tag representing the standard error of a script/function.</p> </li> <li> <code>StdinTag</code>           \u2013            <p>A tag representing the standard input of a script/function.</p> </li> <li> <code>StdoutTag</code>           \u2013            <p>A tag representing the standard output of a script/function.</p> </li> <li> <code>Tag</code>           \u2013            <p>Base class for tags.</p> </li> <li> <code>Template</code>           \u2013            <p>Shellman templates.</p> </li> <li> <code>TextTag</code>           \u2013            <p>A simple tag holding text only.</p> </li> <li> <code>UsageTag</code>           \u2013            <p>A tag representing the command-line usage of a script.</p> </li> <li> <code>ValueDescTag</code>           \u2013            <p>A tag holding a value and a description.</p> </li> <li> <code>VersionTag</code>           \u2013            <p>A tag representing a version.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>console_width</code>             \u2013              <p>Return current console width.</p> </li> <li> <code>do_body</code>             \u2013              <p>Get the body of a text.</p> </li> <li> <code>do_escape</code>             \u2013              <p>Escape (HTML) given text.</p> </li> <li> <code>do_firstline</code>             \u2013              <p>Get the first line of a text.</p> </li> <li> <code>do_firstword</code>             \u2013              <p>Get the first word of a string.</p> </li> <li> <code>do_format</code>             \u2013              <p>Override Jinja's format filter to use format method instead of % operator.</p> </li> <li> <code>do_groffauto</code>             \u2013              <p>Convert a string to the Groff format.</p> </li> <li> <code>do_groffautoemphasis</code>             \u2013              <p>Automatically mark uppercase words as Groff emphasis.</p> </li> <li> <code>do_groffautoescape</code>             \u2013              <p>Automatically Groff-escape dashes, single/double quotes, dots and dollar signs in a string.</p> </li> <li> <code>do_groffautostrong</code>             \u2013              <p>Automatically mark words starting with <code>-</code> or <code>--</code> as Groff strong.</p> </li> <li> <code>do_groffemphasis</code>             \u2013              <p>Mark a string as Groff emphasis.</p> </li> <li> <code>do_groffstrong</code>             \u2013              <p>Mark a string as Groff strong.</p> </li> <li> <code>do_groupby</code>             \u2013              <p>Override Jinja's groupby filter to add un(sort) option.</p> </li> <li> <code>do_smartwrap</code>             \u2013              <p>Smartly wrap the given text.</p> </li> <li> <code>get_parser</code>             \u2013              <p>Return the CLI argument parser.</p> </li> <li> <code>main</code>             \u2013              <p>Run the main program.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>DEFAULT_JSON_FILE</code>           \u2013            <p>The default JSON file to read context from.</p> </li> <li> <code>ENV_VAR_PREFIX</code>           \u2013            <p>The prefix for environment variables that will be used as context.</p> </li> <li> <code>FILTERS</code>           \u2013            <p>The Jinja filters.</p> </li> <li> <code>TAGS</code>               (<code>dict[str | None, type[Tag]]</code>)           \u2013            <p>A dictionary of tag names and their corresponding tag classes.</p> </li> <li> <code>builtin_env</code>           \u2013            <p>The built-in Jinja environment.</p> </li> <li> <code>helptext</code>           \u2013            <p>Template for help text.</p> </li> <li> <code>manpage</code>           \u2013            <p>Template for manpages.</p> </li> <li> <code>manpage_md</code>           \u2013            <p>Template for manpages in Markdown format.</p> </li> <li> <code>tag_no_value_regex</code>           \u2013            <p>Regex to match a tag without a value.</p> </li> <li> <code>tag_value_regex</code>           \u2013            <p>Regex to match a tag and its value.</p> </li> <li> <code>usagetext</code>           \u2013            <p>Template for usage text.</p> </li> <li> <code>wikipage</code>           \u2013            <p>Template for wiki pages.</p> </li> </ul>"},{"location":"reference/api/#shellman.DEFAULT_JSON_FILE","title":"DEFAULT_JSON_FILE  <code>module-attribute</code>","text":"<pre><code>DEFAULT_JSON_FILE = '.shellman.json'\n</code></pre> <p>The default JSON file to read context from.</p>"},{"location":"reference/api/#shellman.ENV_VAR_PREFIX","title":"ENV_VAR_PREFIX  <code>module-attribute</code>","text":"<pre><code>ENV_VAR_PREFIX = 'SHELLMAN_CONTEXT_'\n</code></pre> <p>The prefix for environment variables that will be used as context.</p>"},{"location":"reference/api/#shellman.FILTERS","title":"FILTERS  <code>module-attribute</code>","text":"<pre><code>FILTERS = {\n    \"groffstrong\": do_groffstrong,\n    \"groffemphasis\": do_groffemphasis,\n    \"groffautostrong\": do_groffautostrong,\n    \"groffautoemphasis\": do_groffautoemphasis,\n    \"groffautoescape\": do_groffautoescape,\n    \"groffauto\": do_groffauto,\n    \"groupby\": do_groupby,\n    \"firstword\": do_firstword,\n    \"firstline\": do_firstline,\n    \"body\": do_body,\n    \"smartwrap\": do_smartwrap,\n    \"format\": do_format,\n    \"escape\": do_escape,\n}\n</code></pre> <p>The Jinja filters.</p>"},{"location":"reference/api/#shellman.TAGS","title":"TAGS  <code>module-attribute</code>","text":"<pre><code>TAGS: dict[str | None, type[Tag]] = {\n    None: TextTag,\n    \"author\": AuthorTag,\n    \"bug\": BugTag,\n    \"brief\": BriefTag,\n    \"caveat\": CaveatTag,\n    \"copyright\": CopyrightTag,\n    \"date\": DateTag,\n    \"desc\": DescTag,\n    \"env\": EnvTag,\n    \"error\": ErrorTag,\n    \"example\": ExampleTag,\n    \"exit\": ExitTag,\n    \"file\": FileTag,\n    \"function\": FunctionTag,\n    \"history\": HistoryTag,\n    \"license\": LicenseTag,\n    \"note\": NoteTag,\n    \"option\": OptionTag,\n    \"seealso\": SeealsoTag,\n    \"stderr\": StderrTag,\n    \"stdin\": StdinTag,\n    \"stdout\": StdoutTag,\n    \"usage\": UsageTag,\n    \"version\": VersionTag,\n}\n</code></pre> <p>A dictionary of tag names and their corresponding tag classes.</p>"},{"location":"reference/api/#shellman.builtin_env","title":"builtin_env  <code>module-attribute</code>","text":"<pre><code>builtin_env = _get_env(_get_builtin_path())\n</code></pre> <p>The built-in Jinja environment.</p>"},{"location":"reference/api/#shellman.helptext","title":"helptext  <code>module-attribute</code>","text":"<pre><code>helptext = Template(\n    builtin_env,\n    \"helptext\",\n    context={\"indent\": 2, \"option_padding\": 22},\n)\n</code></pre> <p>Template for help text.</p>"},{"location":"reference/api/#shellman.manpage","title":"manpage  <code>module-attribute</code>","text":"<pre><code>manpage = Template(\n    builtin_env, \"manpage.groff\", context={\"indent\": 4}\n)\n</code></pre> <p>Template for manpages.</p>"},{"location":"reference/api/#shellman.manpage_md","title":"manpage_md  <code>module-attribute</code>","text":"<pre><code>manpage_md = Template(builtin_env, 'manpage.md')\n</code></pre> <p>Template for manpages in Markdown format.</p>"},{"location":"reference/api/#shellman.tag_no_value_regex","title":"tag_no_value_regex  <code>module-attribute</code>","text":"<pre><code>tag_no_value_regex = compile(\n    \"^\\\\s*[\\\\\\\\@]([_a-zA-Z][\\\\w-]*)\\\\s*$\"\n)\n</code></pre> <p>Regex to match a tag without a value.</p>"},{"location":"reference/api/#shellman.tag_value_regex","title":"tag_value_regex  <code>module-attribute</code>","text":"<pre><code>tag_value_regex = compile(\n    \"^\\\\s*[\\\\\\\\@]([_a-zA-Z][\\\\w-]*)\\\\s+(.+)$\"\n)\n</code></pre> <p>Regex to match a tag and its value.</p>"},{"location":"reference/api/#shellman.usagetext","title":"usagetext  <code>module-attribute</code>","text":"<pre><code>usagetext = Template(builtin_env, 'usagetext')\n</code></pre> <p>Template for usage text.</p>"},{"location":"reference/api/#shellman.wikipage","title":"wikipage  <code>module-attribute</code>","text":"<pre><code>wikipage = Template(builtin_env, 'wikipage.md')\n</code></pre> <p>Template for wiki pages.</p>"},{"location":"reference/api/#shellman.AuthorTag","title":"AuthorTag  <code>dataclass</code>","text":"<pre><code>AuthorTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing an author.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.AuthorTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.AuthorTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.BriefTag","title":"BriefTag  <code>dataclass</code>","text":"<pre><code>BriefTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing a summary.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.BriefTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.BriefTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.BugTag","title":"BugTag  <code>dataclass</code>","text":"<pre><code>BugTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing a bug note.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.BugTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.BugTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.CaveatTag","title":"CaveatTag  <code>dataclass</code>","text":"<pre><code>CaveatTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing caveats.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.CaveatTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.CaveatTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.CopyrightTag","title":"CopyrightTag  <code>dataclass</code>","text":"<pre><code>CopyrightTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing copyright information.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.CopyrightTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.CopyrightTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.DateTag","title":"DateTag  <code>dataclass</code>","text":"<pre><code>DateTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing a date.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.DateTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.DateTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.DescTag","title":"DescTag  <code>dataclass</code>","text":"<pre><code>DescTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing a description.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.DescTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.DescTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.DocBlock","title":"DocBlock","text":"<pre><code>DocBlock(lines: list[DocLine] | None = None)\n</code></pre> <p>A documentation block.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>list[DocLine] | None</code>, default:                   <code>None</code> )           \u2013            <p>The block's doc lines.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__bool__</code>             \u2013              <p>True if the block has lines.</p> </li> <li> <code>append</code>             \u2013              <p>Append a line to the block.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>doc_type</code>               (<code>str</code>)           \u2013            <p>The block type.</p> </li> <li> <code>first_line</code>               (<code>DocLine</code>)           \u2013            <p>The block's first doc line.</p> </li> <li> <code>lineno</code>               (<code>int</code>)           \u2013            <p>The block's first line number.</p> </li> <li> <code>lines</code>           \u2013            <p>The block's doc lines.</p> </li> <li> <code>lines_number</code>               (<code>int</code>)           \u2013            <p>The number of lines in the block.</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The block's origin file path.</p> </li> <li> <code>tag</code>               (<code>str</code>)           \u2013            <p>The block's tag.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The block's first line.</p> </li> <li> <code>values</code>               (<code>list[str]</code>)           \u2013            <p>The block's lines.</p> </li> </ul> Source code in <code>src/shellman/_internal/reader.py</code> <pre><code>def __init__(self, lines: list[DocLine] | None = None) -&gt; None:\n    \"\"\"Initialize the doc block.\n\n    Parameters:\n        lines: The block's doc lines.\n    \"\"\"\n    self.lines = lines if lines is not None else []\n    \"\"\"The block's doc lines.\"\"\"\n</code></pre>"},{"location":"reference/api/#shellman.DocBlock.doc_type","title":"doc_type  <code>property</code>","text":"<pre><code>doc_type: str\n</code></pre> <p>The block type.</p>"},{"location":"reference/api/#shellman.DocBlock.first_line","title":"first_line  <code>property</code>","text":"<pre><code>first_line: DocLine\n</code></pre> <p>The block's first doc line.</p>"},{"location":"reference/api/#shellman.DocBlock.lineno","title":"lineno  <code>property</code>","text":"<pre><code>lineno: int\n</code></pre> <p>The block's first line number.</p>"},{"location":"reference/api/#shellman.DocBlock.lines","title":"lines  <code>instance-attribute</code>","text":"<pre><code>lines = lines if lines is not None else []\n</code></pre> <p>The block's doc lines.</p>"},{"location":"reference/api/#shellman.DocBlock.lines_number","title":"lines_number  <code>property</code>","text":"<pre><code>lines_number: int\n</code></pre> <p>The number of lines in the block.</p>"},{"location":"reference/api/#shellman.DocBlock.path","title":"path  <code>property</code>","text":"<pre><code>path: str\n</code></pre> <p>The block's origin file path.</p>"},{"location":"reference/api/#shellman.DocBlock.tag","title":"tag  <code>property</code>","text":"<pre><code>tag: str\n</code></pre> <p>The block's tag.</p>"},{"location":"reference/api/#shellman.DocBlock.value","title":"value  <code>property</code>","text":"<pre><code>value: str\n</code></pre> <p>The block's first line.</p>"},{"location":"reference/api/#shellman.DocBlock.values","title":"values  <code>property</code>","text":"<pre><code>values: list[str]\n</code></pre> <p>The block's lines.</p>"},{"location":"reference/api/#shellman.DocBlock.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>True if the block has lines.</p> Source code in <code>src/shellman/_internal/reader.py</code> <pre><code>def __bool__(self) -&gt; bool:\n    \"\"\"True if the block has lines.\"\"\"\n    return bool(self.lines)\n</code></pre>"},{"location":"reference/api/#shellman.DocBlock.append","title":"append","text":"<pre><code>append(line: DocLine) -&gt; None\n</code></pre> <p>Append a line to the block.</p> <p>Parameters:</p> <ul> <li> <code>line</code>               (<code>DocLine</code>)           \u2013            <p>The doc line to append.</p> </li> </ul> Source code in <code>src/shellman/_internal/reader.py</code> <pre><code>def append(self, line: DocLine) -&gt; None:\n    \"\"\"Append a line to the block.\n\n    Parameters:\n        line: The doc line to append.\n    \"\"\"\n    self.lines.append(line)\n</code></pre>"},{"location":"reference/api/#shellman.DocFile","title":"DocFile","text":"<pre><code>DocFile(path: str)\n</code></pre> <p>A shell script or documentation file.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The path to the file.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>filename</code>           \u2013            <p>The file name.</p> </li> <li> <code>filepath</code>           \u2013            <p>The file path.</p> </li> <li> <code>sections</code>               (<code>dict[str, list[Tag]]</code>)           \u2013            <p>The documentation sections.</p> </li> </ul> Source code in <code>src/shellman/_internal/reader.py</code> <pre><code>def __init__(self, path: str) -&gt; None:\n    \"\"\"Initialize the documentation file.\n\n    Parameters:\n        path: The path to the file.\n    \"\"\"\n    self.filepath = path\n    \"\"\"The file path.\"\"\"\n    self.filename = os.path.basename(path)\n    \"\"\"The file name.\"\"\"\n    self.sections: dict[str, list[Tag]] = {}\n    \"\"\"The documentation sections.\"\"\"\n\n    with open(path, encoding=\"utf-8\") as stream:\n        try:\n            self.sections = _process_blocks(_preprocess_lines(_preprocess_stream(stream)))\n        except UnicodeDecodeError:\n            _logger.error(f\"Cannot read file {path}\")  # noqa: TRY400\n            self.sections = {}\n</code></pre>"},{"location":"reference/api/#shellman.DocFile.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename = basename(path)\n</code></pre> <p>The file name.</p>"},{"location":"reference/api/#shellman.DocFile.filepath","title":"filepath  <code>instance-attribute</code>","text":"<pre><code>filepath = path\n</code></pre> <p>The file path.</p>"},{"location":"reference/api/#shellman.DocFile.sections","title":"sections  <code>instance-attribute</code>","text":"<pre><code>sections: dict[str, list[Tag]] = _process_blocks(\n    _preprocess_lines(_preprocess_stream(stream))\n)\n</code></pre> <p>The documentation sections.</p>"},{"location":"reference/api/#shellman.DocLine","title":"DocLine","text":"<pre><code>DocLine(\n    path: str, lineno: int, tag: str | None, value: str\n)\n</code></pre> <p>A documentation line.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>The origin file path.</p> </li> <li> <code>lineno</code>               (<code>int</code>)           \u2013            <p>The line number in the file.</p> </li> <li> <code>tag</code>               (<code>str | None</code>)           \u2013            <p>The line's tag, if any.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The line's value.</p> </li> </ul> Returned by: <ul> <li> <code></code>\u00a0shellman <code></code>\u00a0DocBlock <code></code>\u00a0first_line </li> </ul> Used by: <ul> <li> <code></code>\u00a0shellman <code></code>\u00a0DocBlock <code></code>\u00a0append </li> </ul> <p>Attributes:</p> <ul> <li> <code>doc_type</code>               (<code>str</code>)           \u2013            <p>The line's doc type.</p> </li> <li> <code>lineno</code>           \u2013            <p>The line number in the file.</p> </li> <li> <code>path</code>           \u2013            <p>The origin file path.</p> </li> <li> <code>tag</code>           \u2013            <p>The line's tag.</p> </li> <li> <code>value</code>           \u2013            <p>The line's value.</p> </li> </ul> Source code in <code>src/shellman/_internal/reader.py</code> <pre><code>def __init__(self, path: str, lineno: int, tag: str | None, value: str) -&gt; None:\n    \"\"\"Initialize the doc line.\n\n    Parameters:\n        path: The origin file path.\n        lineno: The line number in the file.\n        tag: The line's tag, if any.\n        value: The line's value.\n    \"\"\"\n    self.path = path\n    \"\"\"The origin file path.\"\"\"\n    self.lineno = lineno\n    \"\"\"The line number in the file.\"\"\"\n    self.tag = tag or \"\"\n    \"\"\"The line's tag.\"\"\"\n    self.value = value\n    \"\"\"The line's value.\"\"\"\n</code></pre>"},{"location":"reference/api/#shellman.DocLine.doc_type","title":"doc_type  <code>property</code>","text":"<pre><code>doc_type: str\n</code></pre> <p>The line's doc type.</p>"},{"location":"reference/api/#shellman.DocLine.lineno","title":"lineno  <code>instance-attribute</code>","text":"<pre><code>lineno = lineno\n</code></pre> <p>The line number in the file.</p>"},{"location":"reference/api/#shellman.DocLine.path","title":"path  <code>instance-attribute</code>","text":"<pre><code>path = path\n</code></pre> <p>The origin file path.</p>"},{"location":"reference/api/#shellman.DocLine.tag","title":"tag  <code>instance-attribute</code>","text":"<pre><code>tag = tag or ''\n</code></pre> <p>The line's tag.</p>"},{"location":"reference/api/#shellman.DocLine.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value = value\n</code></pre> <p>The line's value.</p>"},{"location":"reference/api/#shellman.DocStream","title":"DocStream","text":"<pre><code>DocStream(stream: Iterable[str], filename: str = '')\n</code></pre> <p>A stream of shell code or documentation.</p> <p>Parameters:</p> <ul> <li> <code>stream</code>               (<code>Iterable[str]</code>)           \u2013            <p>A text stream.</p> </li> <li> <code>filename</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>An optional file name.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>filename</code>           \u2013            <p>The file name.</p> </li> <li> <code>filepath</code>           \u2013            <p>The file path.</p> </li> <li> <code>sections</code>           \u2013            <p>The documentation sections.</p> </li> </ul> Source code in <code>src/shellman/_internal/reader.py</code> <pre><code>def __init__(self, stream: Iterable[str], filename: str = \"\") -&gt; None:\n    \"\"\"Initialize the documentation file.\n\n    Parameters:\n        stream: A text stream.\n        filename: An optional file name.\n    \"\"\"\n    self.filepath = None\n    \"\"\"The file path.\"\"\"\n    self.filename = filename\n    \"\"\"The file name.\"\"\"\n    self.sections = _process_blocks(_preprocess_lines(_preprocess_stream(stream)))\n    \"\"\"The documentation sections.\"\"\"\n</code></pre>"},{"location":"reference/api/#shellman.DocStream.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename = filename\n</code></pre> <p>The file name.</p>"},{"location":"reference/api/#shellman.DocStream.filepath","title":"filepath  <code>instance-attribute</code>","text":"<pre><code>filepath = None\n</code></pre> <p>The file path.</p>"},{"location":"reference/api/#shellman.DocStream.sections","title":"sections  <code>instance-attribute</code>","text":"<pre><code>sections = _process_blocks(\n    _preprocess_lines(_preprocess_stream(stream))\n)\n</code></pre> <p>The documentation sections.</p>"},{"location":"reference/api/#shellman.DocType","title":"DocType","text":"<p>Enumeration of the possible types of documentation.</p> <p>Attributes:</p> <ul> <li> <code>INVALID</code>           \u2013            <p>Invalid type.</p> </li> <li> <code>TAG</code>           \u2013            <p>A tag.</p> </li> <li> <code>TAG_VALUE</code>           \u2013            <p>A tag its value.</p> </li> <li> <code>VALUE</code>           \u2013            <p>A value.</p> </li> </ul>"},{"location":"reference/api/#shellman.DocType.INVALID","title":"INVALID  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INVALID = 'I'\n</code></pre> <p>Invalid type.</p>"},{"location":"reference/api/#shellman.DocType.TAG","title":"TAG  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TAG = 'T'\n</code></pre> <p>A tag.</p>"},{"location":"reference/api/#shellman.DocType.TAG_VALUE","title":"TAG_VALUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TAG_VALUE = 'TV'\n</code></pre> <p>A tag its value.</p>"},{"location":"reference/api/#shellman.DocType.VALUE","title":"VALUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>VALUE = 'V'\n</code></pre> <p>A value.</p>"},{"location":"reference/api/#shellman.EnvTag","title":"EnvTag  <code>dataclass</code>","text":"<pre><code>EnvTag(name: str, description: str)\n</code></pre> <p>               Bases: <code>ValueDescTag</code></p> <p>A tag representing an environment variable used by the script.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The environment variable description.</p> </li> <li> <code>description_field_name</code>               (<code>str</code>)           \u2013            <p>The name of the field containing the description.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The environment variable name.</p> </li> <li> <code>tag</code>               (<code>str</code>)           \u2013            <p>The tag name.</p> </li> <li> <code>value_field_name</code>               (<code>str</code>)           \u2013            <p>The name of the field containing the value.</p> </li> </ul>"},{"location":"reference/api/#shellman.EnvTag.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>The environment variable description.</p>"},{"location":"reference/api/#shellman.EnvTag.description_field_name","title":"description_field_name  <code>class-attribute</code>","text":"<pre><code>description_field_name: str = 'description'\n</code></pre> <p>The name of the field containing the description.</p>"},{"location":"reference/api/#shellman.EnvTag.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The environment variable name.</p>"},{"location":"reference/api/#shellman.EnvTag.tag","title":"tag  <code>class-attribute</code>","text":"<pre><code>tag: str = 'env'\n</code></pre> <p>The tag name.</p>"},{"location":"reference/api/#shellman.EnvTag.value_field_name","title":"value_field_name  <code>class-attribute</code>","text":"<pre><code>value_field_name: str = 'name'\n</code></pre> <p>The name of the field containing the value.</p>"},{"location":"reference/api/#shellman.EnvTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; Self\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; Self:\n    value, description = \"\", []\n    for line in lines:\n        if line.tag == cls.tag:\n            split = line.value.split(\" \", 1)\n            if len(split) &gt; 1:\n                value = split[0]\n                description.append(split[1])\n            else:\n                value = split[0]\n        else:\n            description.append(line.value)\n    return cls(**{cls.value_field_name: value, cls.description_field_name: \"\\n\".join(description)})\n</code></pre>"},{"location":"reference/api/#shellman.ErrorTag","title":"ErrorTag  <code>dataclass</code>","text":"<pre><code>ErrorTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing a known error.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.ErrorTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.ErrorTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.ExampleTag","title":"ExampleTag  <code>dataclass</code>","text":"<pre><code>ExampleTag(\n    brief: str, code: str, code_lang: str, description: str\n)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>A tag representing a code/shell example.</p> Returned by: <ul> <li> <code></code>\u00a0shellman <code></code>\u00a0ExampleTag <code></code>\u00a0from_lines </li> </ul> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>brief</code>               (<code>str</code>)           \u2013            <p>The example's summary.</p> </li> <li> <code>code</code>               (<code>str</code>)           \u2013            <p>The example's code.</p> </li> <li> <code>code_lang</code>               (<code>str</code>)           \u2013            <p>The example's language.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The example's description.</p> </li> </ul>"},{"location":"reference/api/#shellman.ExampleTag.brief","title":"brief  <code>instance-attribute</code>","text":"<pre><code>brief: str\n</code></pre> <p>The example's summary.</p>"},{"location":"reference/api/#shellman.ExampleTag.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code: str\n</code></pre> <p>The example's code.</p>"},{"location":"reference/api/#shellman.ExampleTag.code_lang","title":"code_lang  <code>instance-attribute</code>","text":"<pre><code>code_lang: str\n</code></pre> <p>The example's language.</p>"},{"location":"reference/api/#shellman.ExampleTag.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>The example's description.</p>"},{"location":"reference/api/#shellman.ExampleTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; ExampleTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; ExampleTag:\n    brief, code, description = [], [], []\n    code_lang = \"\"\n    current = None\n    for line in lines:\n        if line.tag == \"example\":\n            if line.value:\n                brief.append(line.value)\n            current = \"brief\"\n        elif line.tag == \"example-code\":\n            if line.value:\n                code_lang = line.value\n            current = \"code\"\n        elif line.tag == \"example-description\":\n            if line.value:\n                description.append(line.value)\n            current = \"description\"\n        elif current == \"brief\":\n            brief.append(line.value)\n        elif current == \"code\":\n            code.append(line.value)\n        elif current == \"description\":\n            description.append(line.value)\n\n    return ExampleTag(\n        brief=\"\\n\".join(brief),\n        code=\"\\n\".join(code),\n        code_lang=code_lang,\n        description=\"\\n\".join(description),\n    )\n</code></pre>"},{"location":"reference/api/#shellman.ExitTag","title":"ExitTag  <code>dataclass</code>","text":"<pre><code>ExitTag(code: str, description: str)\n</code></pre> <p>               Bases: <code>ValueDescTag</code></p> <p>A tag representing an exit code.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>code</code>               (<code>str</code>)           \u2013            <p>The exit code value.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The exit code description.</p> </li> <li> <code>description_field_name</code>               (<code>str</code>)           \u2013            <p>The name of the field containing the description.</p> </li> <li> <code>tag</code>               (<code>str</code>)           \u2013            <p>The tag name.</p> </li> <li> <code>value_field_name</code>               (<code>str</code>)           \u2013            <p>The name of the field containing the value.</p> </li> </ul>"},{"location":"reference/api/#shellman.ExitTag.code","title":"code  <code>instance-attribute</code>","text":"<pre><code>code: str\n</code></pre> <p>The exit code value.</p>"},{"location":"reference/api/#shellman.ExitTag.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>The exit code description.</p>"},{"location":"reference/api/#shellman.ExitTag.description_field_name","title":"description_field_name  <code>class-attribute</code>","text":"<pre><code>description_field_name: str = 'description'\n</code></pre> <p>The name of the field containing the description.</p>"},{"location":"reference/api/#shellman.ExitTag.tag","title":"tag  <code>class-attribute</code>","text":"<pre><code>tag: str = 'exit'\n</code></pre> <p>The tag name.</p>"},{"location":"reference/api/#shellman.ExitTag.value_field_name","title":"value_field_name  <code>class-attribute</code>","text":"<pre><code>value_field_name: str = 'code'\n</code></pre> <p>The name of the field containing the value.</p>"},{"location":"reference/api/#shellman.ExitTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; Self\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; Self:\n    value, description = \"\", []\n    for line in lines:\n        if line.tag == cls.tag:\n            split = line.value.split(\" \", 1)\n            if len(split) &gt; 1:\n                value = split[0]\n                description.append(split[1])\n            else:\n                value = split[0]\n        else:\n            description.append(line.value)\n    return cls(**{cls.value_field_name: value, cls.description_field_name: \"\\n\".join(description)})\n</code></pre>"},{"location":"reference/api/#shellman.FileTag","title":"FileTag  <code>dataclass</code>","text":"<pre><code>FileTag(name: str, description: str)\n</code></pre> <p>               Bases: <code>ValueDescTag</code></p> <p>A tag representing a file used by a script.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The file description.</p> </li> <li> <code>description_field_name</code>               (<code>str</code>)           \u2013            <p>The name of the field containing the description.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The file name/path.</p> </li> <li> <code>tag</code>               (<code>str</code>)           \u2013            <p>The tag name.</p> </li> <li> <code>value_field_name</code>               (<code>str</code>)           \u2013            <p>The name of the field containing the value.</p> </li> </ul>"},{"location":"reference/api/#shellman.FileTag.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>The file description.</p>"},{"location":"reference/api/#shellman.FileTag.description_field_name","title":"description_field_name  <code>class-attribute</code>","text":"<pre><code>description_field_name: str = 'description'\n</code></pre> <p>The name of the field containing the description.</p>"},{"location":"reference/api/#shellman.FileTag.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The file name/path.</p>"},{"location":"reference/api/#shellman.FileTag.tag","title":"tag  <code>class-attribute</code>","text":"<pre><code>tag: str = 'file'\n</code></pre> <p>The tag name.</p>"},{"location":"reference/api/#shellman.FileTag.value_field_name","title":"value_field_name  <code>class-attribute</code>","text":"<pre><code>value_field_name: str = 'name'\n</code></pre> <p>The name of the field containing the value.</p>"},{"location":"reference/api/#shellman.FileTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; Self\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; Self:\n    value, description = \"\", []\n    for line in lines:\n        if line.tag == cls.tag:\n            split = line.value.split(\" \", 1)\n            if len(split) &gt; 1:\n                value = split[0]\n                description.append(split[1])\n            else:\n                value = split[0]\n        else:\n            description.append(line.value)\n    return cls(**{cls.value_field_name: value, cls.description_field_name: \"\\n\".join(description)})\n</code></pre>"},{"location":"reference/api/#shellman.FunctionTag","title":"FunctionTag  <code>dataclass</code>","text":"<pre><code>FunctionTag(\n    prototype: str,\n    brief: str,\n    description: str,\n    arguments: Sequence[str],\n    preconditions: Sequence[str],\n    return_codes: Sequence[str],\n    seealso: Sequence[str],\n    stderr: Sequence[str],\n    stdin: Sequence[str],\n    stdout: Sequence[str],\n)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>A tag representing a shell function.</p> Returned by: <ul> <li> <code></code>\u00a0shellman <code></code>\u00a0FunctionTag <code></code>\u00a0from_lines </li> </ul> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>arguments</code>               (<code>Sequence[str]</code>)           \u2013            <p>The function's arguments.</p> </li> <li> <code>brief</code>               (<code>str</code>)           \u2013            <p>The function's summary.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The function's description.</p> </li> <li> <code>preconditions</code>               (<code>Sequence[str]</code>)           \u2013            <p>The function's preconditions.</p> </li> <li> <code>prototype</code>               (<code>str</code>)           \u2013            <p>The function's prototype.</p> </li> <li> <code>return_codes</code>               (<code>Sequence[str]</code>)           \u2013            <p>The function's return codes.</p> </li> <li> <code>seealso</code>               (<code>Sequence[str]</code>)           \u2013            <p>The function's \"see also\" information.</p> </li> <li> <code>stderr</code>               (<code>Sequence[str]</code>)           \u2013            <p>The function's standard error.</p> </li> <li> <code>stdin</code>               (<code>Sequence[str]</code>)           \u2013            <p>The function's standard input.</p> </li> <li> <code>stdout</code>               (<code>Sequence[str]</code>)           \u2013            <p>The function's standard output.</p> </li> </ul>"},{"location":"reference/api/#shellman.FunctionTag.arguments","title":"arguments  <code>instance-attribute</code>","text":"<pre><code>arguments: Sequence[str]\n</code></pre> <p>The function's arguments.</p>"},{"location":"reference/api/#shellman.FunctionTag.brief","title":"brief  <code>instance-attribute</code>","text":"<pre><code>brief: str\n</code></pre> <p>The function's summary.</p>"},{"location":"reference/api/#shellman.FunctionTag.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>The function's description.</p>"},{"location":"reference/api/#shellman.FunctionTag.preconditions","title":"preconditions  <code>instance-attribute</code>","text":"<pre><code>preconditions: Sequence[str]\n</code></pre> <p>The function's preconditions.</p>"},{"location":"reference/api/#shellman.FunctionTag.prototype","title":"prototype  <code>instance-attribute</code>","text":"<pre><code>prototype: str\n</code></pre> <p>The function's prototype.</p>"},{"location":"reference/api/#shellman.FunctionTag.return_codes","title":"return_codes  <code>instance-attribute</code>","text":"<pre><code>return_codes: Sequence[str]\n</code></pre> <p>The function's return codes.</p>"},{"location":"reference/api/#shellman.FunctionTag.seealso","title":"seealso  <code>instance-attribute</code>","text":"<pre><code>seealso: Sequence[str]\n</code></pre> <p>The function's \"see also\" information.</p>"},{"location":"reference/api/#shellman.FunctionTag.stderr","title":"stderr  <code>instance-attribute</code>","text":"<pre><code>stderr: Sequence[str]\n</code></pre> <p>The function's standard error.</p>"},{"location":"reference/api/#shellman.FunctionTag.stdin","title":"stdin  <code>instance-attribute</code>","text":"<pre><code>stdin: Sequence[str]\n</code></pre> <p>The function's standard input.</p>"},{"location":"reference/api/#shellman.FunctionTag.stdout","title":"stdout  <code>instance-attribute</code>","text":"<pre><code>stdout: Sequence[str]\n</code></pre> <p>The function's standard output.</p>"},{"location":"reference/api/#shellman.FunctionTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; FunctionTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; FunctionTag:\n    brief = \"\"\n    prototype = \"\"\n    description = []\n    arguments = []\n    return_codes = []\n    preconditions = []\n    seealso = []\n    stderr = []\n    stdin = []\n    stdout = []\n    for line in lines:\n        if line.tag == \"function\":\n            prototype = line.value\n        elif line.tag == \"function-brief\":\n            brief = line.value\n        elif line.tag == \"function-description\":\n            description.append(line.value)\n        elif line.tag == \"function-argument\":\n            arguments.append(line.value)\n        elif line.tag == \"function-precondition\":\n            preconditions.append(line.value)\n        elif line.tag == \"function-return\":\n            return_codes.append(line.value)\n        elif line.tag == \"function-seealso\":\n            seealso.append(line.value)\n        elif line.tag == \"function-stderr\":\n            stderr.append(line.value)\n        elif line.tag == \"function-stdin\":\n            stdin.append(line.value)\n        elif line.tag == \"function-stdout\":\n            stdout.append(line.value)\n        else:\n            description.append(line.value)\n\n    return FunctionTag(\n        prototype=prototype,\n        brief=brief,\n        description=\"\\n\".join(description),\n        arguments=arguments,\n        preconditions=preconditions,\n        return_codes=return_codes,\n        seealso=seealso,\n        stderr=stderr,\n        stdin=stdin,\n        stdout=stdout,\n    )\n</code></pre>"},{"location":"reference/api/#shellman.HistoryTag","title":"HistoryTag  <code>dataclass</code>","text":"<pre><code>HistoryTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing a script's history.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.HistoryTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.HistoryTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.LicenseTag","title":"LicenseTag  <code>dataclass</code>","text":"<pre><code>LicenseTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing a license.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.LicenseTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.LicenseTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.NoteTag","title":"NoteTag  <code>dataclass</code>","text":"<pre><code>NoteTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing a note.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.NoteTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.NoteTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.OptionTag","title":"OptionTag  <code>dataclass</code>","text":"<pre><code>OptionTag(\n    short: str,\n    long: str,\n    positional: str,\n    default: str,\n    group: str,\n    description: str,\n)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>A tag representing a command-line option.</p> Returned by: <ul> <li> <code></code>\u00a0shellman <code></code>\u00a0OptionTag <code></code>\u00a0from_lines </li> </ul> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>default</code>               (<code>str</code>)           \u2013            <p>The option default value.</p> </li> <li> <code>description</code>               (<code>str</code>)           \u2013            <p>The option description.</p> </li> <li> <code>group</code>               (<code>str</code>)           \u2013            <p>The option group.</p> </li> <li> <code>long</code>               (<code>str</code>)           \u2013            <p>The option long flag.</p> </li> <li> <code>positional</code>               (<code>str</code>)           \u2013            <p>The option positional arguments.</p> </li> <li> <code>short</code>               (<code>str</code>)           \u2013            <p>The option short flag.</p> </li> <li> <code>signature</code>               (<code>str</code>)           \u2013            <p>The signature of the option.</p> </li> </ul>"},{"location":"reference/api/#shellman.OptionTag.default","title":"default  <code>instance-attribute</code>","text":"<pre><code>default: str\n</code></pre> <p>The option default value.</p>"},{"location":"reference/api/#shellman.OptionTag.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: str\n</code></pre> <p>The option description.</p>"},{"location":"reference/api/#shellman.OptionTag.group","title":"group  <code>instance-attribute</code>","text":"<pre><code>group: str\n</code></pre> <p>The option group.</p>"},{"location":"reference/api/#shellman.OptionTag.long","title":"long  <code>instance-attribute</code>","text":"<pre><code>long: str\n</code></pre> <p>The option long flag.</p>"},{"location":"reference/api/#shellman.OptionTag.positional","title":"positional  <code>instance-attribute</code>","text":"<pre><code>positional: str\n</code></pre> <p>The option positional arguments.</p>"},{"location":"reference/api/#shellman.OptionTag.short","title":"short  <code>instance-attribute</code>","text":"<pre><code>short: str\n</code></pre> <p>The option short flag.</p>"},{"location":"reference/api/#shellman.OptionTag.signature","title":"signature  <code>cached</code> <code>property</code>","text":"<pre><code>signature: str\n</code></pre> <p>The signature of the option.</p>"},{"location":"reference/api/#shellman.OptionTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; OptionTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; OptionTag:\n    short, long, positional, default, group = \"\", \"\", \"\", \"\", \"\"\n    description = []\n    for line in lines:\n        if line.tag == \"option\":\n            search = re.search(\n                r\"^(?P&lt;short&gt;-\\w)?(?:, )?(?P&lt;long&gt;--[\\w-]+)? ?(?P&lt;positional&gt;.+)?\",\n                line.value,\n            )\n            if search:\n                short, long, positional = search.groups(default=\"\")\n            else:\n                positional = line.value\n        elif line.tag == \"option-default\":\n            default = line.value\n        elif line.tag == \"option-group\":\n            group = line.value\n        else:\n            description.append(line.value)\n    return OptionTag(\n        short=short,\n        long=long,\n        positional=positional,\n        default=default,\n        group=group,\n        description=\"\\n\".join(description),\n    )\n</code></pre>"},{"location":"reference/api/#shellman.SeealsoTag","title":"SeealsoTag  <code>dataclass</code>","text":"<pre><code>SeealsoTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing \"See Also\" information.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.SeealsoTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.SeealsoTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.StderrTag","title":"StderrTag  <code>dataclass</code>","text":"<pre><code>StderrTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing the standard error of a script/function.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.StderrTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.StderrTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.StdinTag","title":"StdinTag  <code>dataclass</code>","text":"<pre><code>StdinTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing the standard input of a script/function.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.StdinTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.StdinTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.StdoutTag","title":"StdoutTag  <code>dataclass</code>","text":"<pre><code>StdoutTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing the standard output of a script/function.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.StdoutTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.StdoutTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.Tag","title":"Tag","text":"<p>Base class for tags.</p> Returned by: <ul> <li> \u00a0shellman <ul> <li> \u00a0AuthorTag \u00a0from_lines </li> <li> \u00a0BriefTag \u00a0from_lines </li> <li> \u00a0BugTag \u00a0from_lines </li> <li> \u00a0CaveatTag \u00a0from_lines </li> <li> \u00a0CopyrightTag \u00a0from_lines </li> <li> \u00a0DateTag \u00a0from_lines </li> <li> \u00a0DescTag \u00a0from_lines </li> <li> \u00a0EnvTag \u00a0from_lines </li> <li> \u00a0ErrorTag \u00a0from_lines </li> <li> \u00a0ExampleTag \u00a0from_lines </li> <li> \u00a0ExitTag \u00a0from_lines </li> <li> \u00a0FileTag \u00a0from_lines </li> <li> \u00a0FunctionTag \u00a0from_lines </li> <li> \u00a0HistoryTag \u00a0from_lines </li> <li> \u00a0LicenseTag \u00a0from_lines </li> <li> \u00a0NoteTag \u00a0from_lines </li> <li> \u00a0OptionTag \u00a0from_lines </li> <li> \u00a0SeealsoTag \u00a0from_lines </li> <li> \u00a0StderrTag \u00a0from_lines </li> <li> \u00a0StdinTag \u00a0from_lines </li> <li> \u00a0StdoutTag \u00a0from_lines </li> <li> \u00a0Tag \u00a0from_lines </li> <li> \u00a0TextTag \u00a0from_lines </li> <li> \u00a0UsageTag \u00a0from_lines </li> <li> \u00a0ValueDescTag \u00a0from_lines </li> <li> \u00a0VersionTag \u00a0from_lines </li> </ul> </li> </ul> Subclassed by: <ul> <li> \u00a0shellman <ul> <li> \u00a0ExampleTag </li> <li> \u00a0FunctionTag </li> <li> \u00a0OptionTag </li> <li> \u00a0TextTag </li> <li> \u00a0UsageTag </li> <li> \u00a0ValueDescTag </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul>"},{"location":"reference/api/#shellman.Tag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; Tag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; Tag:\n    \"\"\"Parse a sequence of lines into a tag instance.\n\n    Parameters:\n        lines: The sequence of lines to parse.\n\n    Returns:\n        A tag instance.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/api/#shellman.Template","title":"Template","text":"<pre><code>Template(\n    env_or_directory: str | Environment,\n    base_template: str,\n    context: dict[str, Any] | None = None,\n    filters: dict[str, Any] | None = None,\n)\n</code></pre> <p>Shellman templates.</p> <p>Parameters:</p> <ul> <li> <code>env_or_directory</code>               (<code>str | Environment</code>)           \u2013            <p>Jinja environment or directory to load environment from.</p> </li> <li> <code>base_template</code>               (<code>str</code>)           \u2013            <p>The template file to use.</p> </li> <li> <code>context</code>               (<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Base context to render with.</p> </li> <li> <code>filters</code>               (<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Base filters to add to the environment.</p> </li> </ul> Returned by: <ul> <li> <code></code>\u00a0shellman <code></code>\u00a0Template <code></code>\u00a0template </li> </ul> <p>Methods:</p> <ul> <li> <code>render</code>             \u2013              <p>Render the template.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>base_template</code>           \u2013            <p>The base template file.</p> </li> <li> <code>context</code>           \u2013            <p>The base context.</p> </li> <li> <code>env</code>               (<code>Environment</code>)           \u2013            <p>The Jinja environment.</p> </li> <li> <code>template</code>               (<code>Template</code>)           \u2013            <p>The corresponding Jinja template.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/__init__.py</code> <pre><code>def __init__(\n    self,\n    env_or_directory: str | Environment,\n    base_template: str,\n    context: dict[str, Any] | None = None,\n    filters: dict[str, Any] | None = None,\n):\n    \"\"\"Initialize the template.\n\n    Parameters:\n        env_or_directory: Jinja environment or directory to load environment from.\n        base_template: The template file to use.\n        context: Base context to render with.\n        filters: Base filters to add to the environment.\n    \"\"\"\n    self.env: Environment\n    \"\"\"The Jinja environment.\"\"\"\n\n    if isinstance(env_or_directory, Environment):\n        self.env = env_or_directory\n    elif isinstance(env_or_directory, str):\n        self.env = _get_env(env_or_directory)\n    else:\n        raise TypeError(env_or_directory)\n\n    if filters is None:\n        filters = {}\n\n    self.env.filters.update(FILTERS)\n    self.env.filters.update(filters)\n\n    self.base_template = base_template\n    \"\"\"The base template file.\"\"\"\n    self.context = context or {}\n    \"\"\"The base context.\"\"\"\n    self.__template: Template = None  # type: ignore[assignment]\n</code></pre>"},{"location":"reference/api/#shellman.Template.base_template","title":"base_template  <code>instance-attribute</code>","text":"<pre><code>base_template = base_template\n</code></pre> <p>The base template file.</p>"},{"location":"reference/api/#shellman.Template.context","title":"context  <code>instance-attribute</code>","text":"<pre><code>context = context or {}\n</code></pre> <p>The base context.</p>"},{"location":"reference/api/#shellman.Template.env","title":"env  <code>instance-attribute</code>","text":"<pre><code>env: Environment\n</code></pre> <p>The Jinja environment.</p>"},{"location":"reference/api/#shellman.Template.template","title":"template  <code>property</code>","text":"<pre><code>template: Template\n</code></pre> <p>The corresponding Jinja template.</p>"},{"location":"reference/api/#shellman.Template.render","title":"render","text":"<pre><code>render(**kwargs: Any) -&gt; str\n</code></pre> <p>Render the template.</p> <p>Parameters:</p> <ul> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments passed to Jinja's render method.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The rendered text.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/__init__.py</code> <pre><code>def render(self, **kwargs: Any) -&gt; str:\n    \"\"\"Render the template.\n\n    Parameters:\n        **kwargs: Keyword arguments passed to Jinja's render method.\n\n\n    Returns:\n        The rendered text.\n    \"\"\"\n    context = deepcopy(self.context)\n    context.update(kwargs)\n    return self.template.render(**context).rstrip(\"\\n\")\n</code></pre>"},{"location":"reference/api/#shellman.TextTag","title":"TextTag  <code>dataclass</code>","text":"<pre><code>TextTag(text: str)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>A simple tag holding text only.</p> Returned by: <ul> <li> <code></code>\u00a0shellman <ul> <li> <code></code>\u00a0AuthorTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0BriefTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0BugTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0CaveatTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0CopyrightTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0DateTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0DescTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0ErrorTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0HistoryTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0LicenseTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0NoteTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0SeealsoTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0StderrTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0StdinTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0StdoutTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0TextTag <code></code>\u00a0from_lines </li> <li> <code></code>\u00a0VersionTag <code></code>\u00a0from_lines </li> </ul> </li> </ul> Subclassed by: <ul> <li> <code></code>\u00a0shellman <ul> <li> <code></code>\u00a0AuthorTag </li> <li> <code></code>\u00a0BriefTag </li> <li> <code></code>\u00a0BugTag </li> <li> <code></code>\u00a0CaveatTag </li> <li> <code></code>\u00a0CopyrightTag </li> <li> <code></code>\u00a0DateTag </li> <li> <code></code>\u00a0DescTag </li> <li> <code></code>\u00a0ErrorTag </li> <li> <code></code>\u00a0HistoryTag </li> <li> <code></code>\u00a0LicenseTag </li> <li> <code></code>\u00a0NoteTag </li> <li> <code></code>\u00a0SeealsoTag </li> <li> <code></code>\u00a0StderrTag </li> <li> <code></code>\u00a0StdinTag </li> <li> <code></code>\u00a0StdoutTag </li> <li> <code></code>\u00a0VersionTag </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.TextTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.TextTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.UsageTag","title":"UsageTag  <code>dataclass</code>","text":"<pre><code>UsageTag(program: str, command: str)\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>A tag representing the command-line usage of a script.</p> Returned by: <ul> <li> <code></code>\u00a0shellman <code></code>\u00a0UsageTag <code></code>\u00a0from_lines </li> </ul> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>command</code>               (<code>str</code>)           \u2013            <p>The command-line usage.</p> </li> <li> <code>program</code>               (<code>str</code>)           \u2013            <p>The program name.</p> </li> </ul>"},{"location":"reference/api/#shellman.UsageTag.command","title":"command  <code>instance-attribute</code>","text":"<pre><code>command: str\n</code></pre> <p>The command-line usage.</p>"},{"location":"reference/api/#shellman.UsageTag.program","title":"program  <code>instance-attribute</code>","text":"<pre><code>program: str\n</code></pre> <p>The program name.</p>"},{"location":"reference/api/#shellman.UsageTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; UsageTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; UsageTag:\n    program, command = \"\", \"\"\n    split = lines[0].value.split(\" \", 1)\n    if len(split) &gt; 1:\n        program, command = split\n    else:\n        program = split[0]\n    if len(lines) &gt; 1:\n        command = command + \"\\n\" + \"\\n\".join(line.value for line in lines[1:])\n    return UsageTag(program=program, command=command)\n</code></pre>"},{"location":"reference/api/#shellman.ValueDescTag","title":"ValueDescTag  <code>dataclass</code>","text":"<pre><code>ValueDescTag()\n</code></pre> <p>               Bases: <code>Tag</code></p> <p>A tag holding a value and a description.</p> Subclassed by: <ul> <li> <code></code>\u00a0shellman <ul> <li> <code></code>\u00a0EnvTag </li> <li> <code></code>\u00a0ExitTag </li> <li> <code></code>\u00a0FileTag </li> </ul> </li> </ul> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>description_field_name</code>               (<code>str</code>)           \u2013            <p>The name of the field containing the description.</p> </li> <li> <code>tag</code>               (<code>str</code>)           \u2013            <p>The tag name.</p> </li> <li> <code>value_field_name</code>               (<code>str</code>)           \u2013            <p>The name of the field containing the value.</p> </li> </ul>"},{"location":"reference/api/#shellman.ValueDescTag.description_field_name","title":"description_field_name  <code>class-attribute</code>","text":"<pre><code>description_field_name: str = 'description'\n</code></pre> <p>The name of the field containing the description.</p>"},{"location":"reference/api/#shellman.ValueDescTag.tag","title":"tag  <code>class-attribute</code>","text":"<pre><code>tag: str\n</code></pre> <p>The tag name.</p>"},{"location":"reference/api/#shellman.ValueDescTag.value_field_name","title":"value_field_name  <code>class-attribute</code>","text":"<pre><code>value_field_name: str = 'name'\n</code></pre> <p>The name of the field containing the value.</p>"},{"location":"reference/api/#shellman.ValueDescTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; Self\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; Self:\n    value, description = \"\", []\n    for line in lines:\n        if line.tag == cls.tag:\n            split = line.value.split(\" \", 1)\n            if len(split) &gt; 1:\n                value = split[0]\n                description.append(split[1])\n            else:\n                value = split[0]\n        else:\n            description.append(line.value)\n    return cls(**{cls.value_field_name: value, cls.description_field_name: \"\\n\".join(description)})\n</code></pre>"},{"location":"reference/api/#shellman.VersionTag","title":"VersionTag  <code>dataclass</code>","text":"<pre><code>VersionTag(text: str)\n</code></pre> <p>               Bases: <code>TextTag</code></p> <p>A tag representing a version.</p> <p>Methods:</p> <ul> <li> <code>from_lines</code>             \u2013              <p>Parse a sequence of lines into a tag instance.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The tag's text.</p> </li> </ul>"},{"location":"reference/api/#shellman.VersionTag.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>The tag's text.</p>"},{"location":"reference/api/#shellman.VersionTag.from_lines","title":"from_lines  <code>classmethod</code>","text":"<pre><code>from_lines(lines: Sequence[DocLine]) -&gt; TextTag\n</code></pre> <p>Parse a sequence of lines into a tag instance.</p> <p>Parameters:</p> <ul> <li> <code>lines</code>               (<code>Sequence[DocLine]</code>)           \u2013            <p>The sequence of lines to parse.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Tag</code>           \u2013            <p>A tag instance.</p> </li> </ul> Source code in <code>src/shellman/_internal/tags.py</code> <pre><code>@classmethod\ndef from_lines(cls, lines: Sequence[DocLine]) -&gt; TextTag:\n    return cls(text=\"\\n\".join(line.value for line in lines))\n</code></pre>"},{"location":"reference/api/#shellman.console_width","title":"console_width","text":"<pre><code>console_width(default: int = 80) -&gt; int\n</code></pre> <p>Return current console width.</p> <p>Parameters:</p> <ul> <li> <code>default</code>               (<code>int</code>, default:                   <code>80</code> )           \u2013            <p>The default value if width cannot be retrieved.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>The console width.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def console_width(default: int = 80) -&gt; int:\n    \"\"\"Return current console width.\n\n    Parameters:\n        default: The default value if width cannot be retrieved.\n\n    Returns:\n        The console width.\n    \"\"\"\n    # only solution that works with stdin redirected from file\n    # https://stackoverflow.com/questions/566746\n    return get_terminal_size((default, 20)).columns\n</code></pre>"},{"location":"reference/api/#shellman.do_body","title":"do_body","text":"<pre><code>do_body(\n    string_or_list: str | Sequence[str],\n    delimiter: str = \" \",\n) -&gt; str | None\n</code></pre> <p>Get the body of a text.</p> <p>Parameters:</p> <ul> <li> <code>string_or_list</code>               (<code>str | Sequence[str]</code>)           \u2013            <p>Given text.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The text's body.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_body(string_or_list: str | Sequence[str], delimiter: str = \" \") -&gt; str | None:\n    \"\"\"Get the body of a text.\n\n    Parameters:\n        string_or_list: Given text.\n\n\n    Returns:\n        The text's body.\n    \"\"\"\n    if isinstance(string_or_list, str):\n        return string_or_list.split(delimiter, 1)[1]\n    if isinstance(string_or_list, list):\n        return \"\\n\".join(string_or_list[1:])\n    return None\n</code></pre>"},{"location":"reference/api/#shellman.do_escape","title":"do_escape","text":"<pre><code>do_escape(\n    value: str, except_starts_with: list[str] | None = None\n) -&gt; str\n</code></pre> <p>Escape (HTML) given text.</p> <p>Parameters:</p> <ul> <li> <code>except_starts_with</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Each line starting with at least one of the prefixes listed in this parameter will not be escaped.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The escaped text.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_escape(value: str, except_starts_with: list[str] | None = None) -&gt; str:\n    \"\"\"Escape (HTML) given text.\n\n    Parameters:\n        except_starts_with: Each line starting with at least one of the prefixes\n            listed in this parameter will not be escaped.\n\n    Returns:\n        The escaped text.\n    \"\"\"\n    predicate = (\n        (lambda line: any(line.startswith(string) for string in except_starts_with))\n        if except_starts_with is not None\n        else lambda line: False\n    )\n    return \"\\n\".join(line if line == \"\" or predicate(line) else escape(line) for line in value.split(\"\\n\"))\n</code></pre>"},{"location":"reference/api/#shellman.do_firstline","title":"do_firstline","text":"<pre><code>do_firstline(\n    string_or_list: str | Sequence[str],\n) -&gt; str | None\n</code></pre> <p>Get the first line of a text.</p> <p>Parameters:</p> <ul> <li> <code>string_or_list</code>               (<code>str | Sequence[str]</code>)           \u2013            <p>Given text.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            <p>The text's first line.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_firstline(string_or_list: str | Sequence[str]) -&gt; str | None:\n    \"\"\"Get the first line of a text.\n\n    Parameters:\n        string_or_list: Given text.\n\n\n    Returns:\n        The text's first line.\n    \"\"\"\n    if isinstance(string_or_list, str):\n        return string_or_list.split(\"\\n\", 1)[0]\n    if isinstance(string_or_list, list):\n        return string_or_list[0]\n    return None\n</code></pre>"},{"location":"reference/api/#shellman.do_firstword","title":"do_firstword","text":"<pre><code>do_firstword(string: str, delimiters: str = ' ') -&gt; str\n</code></pre> <p>Get the first word of a string.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>The string.</p> </li> <li> <code>delimiters</code>               (<code>str</code>, default:                   <code>' '</code> )           \u2013            <p>The delimiter characters.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The string's first word.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_firstword(string: str, delimiters: str = \" \") -&gt; str:\n    \"\"\"Get the first word of a string.\n\n    Parameters:\n        string: The string.\n        delimiters: The delimiter characters.\n\n\n    Returns:\n        The string's first word.\n    \"\"\"\n    # FIXME: maybe use a regex instead: ^[\\w_]+\n    for i, char in enumerate(string):\n        if char in delimiters:\n            return string[:i]\n    return string\n</code></pre>"},{"location":"reference/api/#shellman.do_format","title":"do_format","text":"<pre><code>do_format(string: str, *args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Override Jinja's format filter to use format method instead of % operator.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>The string to format.</p> </li> <li> <code>*args</code>               (<code>Any</code>, default:                   <code>()</code> )           \u2013            <p>Arguments passed to <code>str.format</code>.</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments passed to <code>str.format</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The formatted string.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_format(string: str, *args: Any, **kwargs: Any) -&gt; str:\n    \"\"\"Override Jinja's format filter to use format method instead of % operator.\n\n    Parameters:\n        string: The string to format.\n        *args: Arguments passed to `str.format`.\n        **kwargs: Keyword arguments passed to `str.format`.\n\n\n    Returns:\n        The formatted string.\n    \"\"\"\n    return string.format(*args, **kwargs)\n</code></pre>"},{"location":"reference/api/#shellman.do_groffauto","title":"do_groffauto","text":"<pre><code>do_groffauto(string: str, *, escape: bool = True) -&gt; str\n</code></pre> <p>Convert a string to the Groff format.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>The string to convert.</p> </li> <li> <code>escape</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to escape the result.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A Groff string.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_groffauto(string: str, *, escape: bool = True) -&gt; str:\n    \"\"\"Convert a string to the Groff format.\n\n    Parameters:\n        string: The string to convert.\n        escape: Whether to escape the result.\n\n    Returns:\n        A Groff string.\n    \"\"\"\n    string = do_groffautoemphasis(string)\n    string = do_groffautostrong(string)\n    if escape:\n        string = do_groffautoescape(string)\n    return string\n</code></pre>"},{"location":"reference/api/#shellman.do_groffautoemphasis","title":"do_groffautoemphasis","text":"<pre><code>do_groffautoemphasis(string: str) -&gt; str\n</code></pre> <p>Automatically mark uppercase words as Groff emphasis.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>The string to convert.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The updated string.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_groffautoemphasis(string: str) -&gt; str:\n    \"\"\"Automatically mark uppercase words as Groff emphasis.\n\n    Parameters:\n        string: The string to convert.\n\n    Returns:\n        The updated string.\n    \"\"\"\n    return re.sub(r\"(\\b[A-Z_0-9]{2,}\\b)\", r\"\\\\fI\\1\\\\fR\", string)\n</code></pre>"},{"location":"reference/api/#shellman.do_groffautoescape","title":"do_groffautoescape","text":"<pre><code>do_groffautoescape(string: str) -&gt; str\n</code></pre> <p>Automatically Groff-escape dashes, single/double quotes, dots and dollar signs in a string.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>The string to escape.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The escaped string.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_groffautoescape(string: str) -&gt; str:\n    \"\"\"Automatically Groff-escape dashes, single/double quotes, dots and dollar signs in a string.\n\n    Parameters:\n        string: The string to escape.\n\n    Returns:\n        The escaped string.\n    \"\"\"\n    return string.replace(\"-\", \"\\\\-\").replace(\"'\", \"\\\\'\").replace('\"', '\\\\\"').replace(\".\", \"\\\\.\").replace(\"$\", \"\\\\f$\")\n</code></pre>"},{"location":"reference/api/#shellman.do_groffautostrong","title":"do_groffautostrong","text":"<pre><code>do_groffautostrong(string: str) -&gt; str\n</code></pre> <p>Automatically mark words starting with <code>-</code> or <code>--</code> as Groff strong.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>The string to convert.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The updated string.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_groffautostrong(string: str) -&gt; str:\n    \"\"\"Automatically mark words starting with `-` or `--` as Groff strong.\n\n    Parameters:\n        string: The string to convert.\n\n    Returns:\n        The updated string.\n    \"\"\"\n    return re.sub(r\"(--?[\\w-]+=?)\", r\"\\\\fB\\1\\\\fR\", string)\n</code></pre>"},{"location":"reference/api/#shellman.do_groffemphasis","title":"do_groffemphasis","text":"<pre><code>do_groffemphasis(string: str) -&gt; str\n</code></pre> <p>Mark a string as Groff emphasis.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>The string to convert</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The updated string.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_groffemphasis(string: str) -&gt; str:\n    \"\"\"Mark a string as Groff emphasis.\n\n    Parameters:\n        string: The string to convert\n\n    Returns:\n        The updated string.\n    \"\"\"\n    return \"\\\\fI\" + string + \"\\\\fR\"\n</code></pre>"},{"location":"reference/api/#shellman.do_groffstrong","title":"do_groffstrong","text":"<pre><code>do_groffstrong(string: str) -&gt; str\n</code></pre> <p>Mark a string as Groff strong.</p> <p>Parameters:</p> <ul> <li> <code>string</code>               (<code>str</code>)           \u2013            <p>The string to convert.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The updated string.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_groffstrong(string: str) -&gt; str:\n    \"\"\"Mark a string as Groff strong.\n\n    Parameters:\n        string: The string to convert.\n\n    Returns:\n        The updated string.\n    \"\"\"\n    return \"\\\\fB\" + string + \"\\\\fR\"\n</code></pre>"},{"location":"reference/api/#shellman.do_groupby","title":"do_groupby","text":"<pre><code>do_groupby(\n    environment: Environment,\n    value: Sequence[Any],\n    attribute: str,\n    *,\n    sort: bool = True,\n) -&gt; list[tuple[str, list[Any]]]\n</code></pre> <p>Override Jinja's groupby filter to add un(sort) option.</p> <p>Parameters:</p> <ul> <li> <code>environment</code>               (<code>Environment</code>)           \u2013            <p>Passed by Jinja.</p> </li> <li> <code>value</code>               (<code>Sequence[Any]</code>)           \u2013            <p>The value to group.</p> </li> <li> <code>attribute</code>               (<code>str</code>)           \u2013            <p>The attribute to use for grouping/sorting.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[tuple[str, list[Any]]]</code>           \u2013            <p>The value grouped by the given attribute.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>@pass_environment\ndef do_groupby(\n    environment: Environment,\n    value: Sequence[Any],\n    attribute: str,\n    *,\n    sort: bool = True,\n) -&gt; list[tuple[str, list[Any]]]:\n    \"\"\"Override Jinja's groupby filter to add un(sort) option.\n\n    Parameters:\n        environment: Passed by Jinja.\n        value: The value to group.\n        attribute: The attribute to use for grouping/sorting.\n\n    Returns:\n        The value grouped by the given attribute.\n    \"\"\"\n    expr = make_attrgetter(environment, attribute)\n\n    # Original behavior: groups are sorted\n    if sort:\n        return [_GroupTuple(key, list(values)) for key, values in groupby(sorted(value, key=expr), expr)]\n\n    # Added behavior: original order of appearance is kept\n    all_groups = [expr(_) for _ in value]\n    group_set = set()\n    unique_groups = []\n    for group in all_groups:\n        if group not in group_set:\n            unique_groups.append(group)\n            group_set.add(group)\n    grouped = {k: list(v) for k, v in groupby(sorted(value, key=expr), expr)}\n    return [_GroupTuple(group, grouped[group]) for group in unique_groups]\n</code></pre>"},{"location":"reference/api/#shellman.do_smartwrap","title":"do_smartwrap","text":"<pre><code>do_smartwrap(\n    text: str,\n    indent: int = 4,\n    width: int | None = None,\n    *,\n    indentfirst: bool = True,\n) -&gt; str\n</code></pre> <p>Smartly wrap the given text.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The text to wrap.</p> </li> <li> <code>indent</code>               (<code>int</code>, default:                   <code>4</code> )           \u2013            <p>The indentation to use (number of spaces).</p> </li> <li> <code>width</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>The desired text width.</p> </li> <li> <code>indentfirst</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to indent the first line too.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The wrapped text.</p> </li> </ul> Source code in <code>src/shellman/_internal/templates/filters.py</code> <pre><code>def do_smartwrap(text: str, indent: int = 4, width: int | None = None, *, indentfirst: bool = True) -&gt; str:\n    \"\"\"Smartly wrap the given text.\n\n    Parameters:\n        text: The text to wrap.\n        indent: The indentation to use (number of spaces).\n        width: The desired text width.\n        indentfirst: Whether to indent the first line too.\n\n    Returns:\n        The wrapped text.\n    \"\"\"\n    if width is None or width &lt; 0:\n        c_width = console_width(default=79)\n        if width is None:\n            width = c_width or 79\n        else:\n            width += c_width\n\n    indent_str = indent * \" \"\n    to_join = defaultdict(lambda: False)\n    lines = text.split(\"\\n\")\n    previous = True\n    for i, line in enumerate(lines):\n        if not (line == \"\" or line[0] in (\" \", \"\\t\")):\n            if previous:\n                to_join[i] = True\n            previous = True\n        else:\n            previous = False\n    joined_lines = [lines[0]]\n    for i in range(1, len(lines)):\n        if to_join[i]:\n            joined_lines.append(\" \" + lines[i])\n        else:\n            joined_lines.append(\"\\n\" + lines[i])\n    new_text = \"\".join(joined_lines)\n    new_text_lines = new_text.split(\"\\n\")\n    wrapper = textwrap.TextWrapper(subsequent_indent=indent_str)\n    wrap_indented_text_lines = []\n    first_line = new_text_lines[0]\n    if not (first_line == \"\" or first_line[0] in (\" \", \"\\t\")):\n        if indentfirst:\n            wrapper.width = width\n            wrapper.initial_indent = indent_str\n        else:\n            wrapper.width = width - indent\n            wrapper.initial_indent = \"\"\n        wrap_indented_text_lines.append(wrapper.fill(first_line))\n    elif first_line:\n        wrap_indented_text_lines.append(indent_str + first_line)\n    else:\n        wrap_indented_text_lines.append(\"\")\n    wrapper.width = width\n    wrapper.initial_indent = indent_str\n    for line in new_text_lines[1:]:\n        if not (line == \"\" or line[0] in (\" \", \"\\t\")):\n            wrap_indented_text_lines.append(wrapper.fill(line))\n        elif line:\n            wrap_indented_text_lines.append(indent_str + line)\n        else:\n            wrap_indented_text_lines.append(\"\")\n    return \"\\n\".join(wrap_indented_text_lines)\n</code></pre>"},{"location":"reference/api/#shellman.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; ArgumentParser\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> <ul> <li> <code>ArgumentParser</code>           \u2013            <p>An argparse parser.</p> </li> </ul> Source code in <code>src/shellman/_internal/cli.py</code> <pre><code>def get_parser() -&gt; argparse.ArgumentParser:\n    \"\"\"Return the CLI argument parser.\n\n    Returns:\n        An argparse parser.\n    \"\"\"\n    parser = argparse.ArgumentParser(prog=\"shellman\")\n\n    parser.add_argument(\n        \"-c\",\n        \"--context\",\n        dest=\"context\",\n        nargs=\"+\",\n        help=\"context to inject when rendering the template. \"\n        \"You can pass JSON strings or key=value pairs. \"\n        \"Example: `--context project=hello '{\\\"version\\\": [0, 3, 1]}'`.\",\n    )\n\n    parser.add_argument(\n        \"--context-file\",\n        dest=\"context_file\",\n        help=\"JSON file to read context from. \"\n        f\"By default shellman will try to read the file '{DEFAULT_JSON_FILE}' \"\n        \"in the current directory.\",\n    )\n\n    parser.add_argument(\n        \"-t\",\n        \"--template\",\n        metavar=\"TEMPLATE\",\n        choices=templates._parser_choices(),\n        default=\"helptext\",\n        dest=\"template\",\n        help=\"the Jinja2 template to use. \"\n        'Prefix with \"path:\" to specify the path '\n        \"to a custom template. \"\n        f\"Available templates: {', '.join(templates._names())}\",\n    )\n\n    parser.add_argument(\n        \"-m\",\n        \"--merge\",\n        dest=\"merge\",\n        action=\"store_true\",\n        help=\"with multiple input files, merge their contents in the output \"\n        \"instead of appending (default: %(default)s). \",\n    )\n\n    parser.add_argument(\n        \"-o\",\n        \"--output\",\n        action=\"store\",\n        dest=\"output\",\n        default=None,\n        help=\"file to write to (default: stdout). \"\n        \"You can use the following variables in the output name: \"\n        \"{basename}, {ext}, {filename} (equal to {basename}.{ext}), \"\n        \"{filepath}, {dirname}, {dirpath}, and {vcsroot} \"\n        \"(git and mercurial supported). \"\n        \"They will be populated from each input file.\",\n    )\n    parser.add_argument(\"-V\", \"--version\", action=\"version\", version=f\"%(prog)s {debug._get_version()}\")\n    parser.add_argument(\"--debug-info\", action=_DebugInfo, help=\"Print debug information.\")\n\n    parser.add_argument(\n        \"FILE\",\n        type=_valid_file,\n        nargs=\"*\",\n        help=\"path to the file(s) to read. Use - to read on standard input.\",\n    )\n    return parser\n</code></pre>"},{"location":"reference/api/#shellman.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>shellman</code> or <code>python -m shellman</code>.</p> <p>Get the file to parse, construct a Doc object, get file's doc, get the according formatter class, instantiate it with acquired doc and write on specified file (stdout by default).</p> <p>Parameters:</p> <ul> <li> <code>args</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Arguments passed from the command line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>An exit code.</p> </li> </ul> Source code in <code>src/shellman/_internal/cli.py</code> <pre><code>def main(args: list[str] | None = None) -&gt; int:\n    \"\"\"Run the main program.\n\n    This function is executed when you type `shellman` or `python -m shellman`.\n\n    Get the file to parse, construct a Doc object, get file's doc,\n    get the according formatter class, instantiate it\n    with acquired doc and write on specified file (stdout by default).\n\n    Parameters:\n        args: Arguments passed from the command line.\n\n    Returns:\n        An exit code.\n    \"\"\"\n    templates._load_plugin_templates()\n\n    parser = get_parser()\n    opts = parser.parse_args(args)\n\n    # Catch errors as early as possible\n    if opts.merge and len(opts.FILE) &lt; 2:  # noqa: PLR2004\n        print(\n            \"shellman: warning: --merge option is ignored with less than 2 inputs\",\n            file=sys.stderr,\n        )\n\n    if not opts.FILE and opts.output and _is_format_string(opts.output):\n        parser.print_usage(file=sys.stderr)\n        print(\n            \"shellman: error: cannot format output name without file inputs. \"\n            \"Please remove variables from output name, or provide file inputs\",\n            file=sys.stderr,\n        )\n        return 2\n\n    # Immediately get the template to throw error if not found\n    if opts.template.startswith(\"path:\"):\n        template = templates._get_custom_template(opts.template[5:])\n    else:\n        template = templates.templates[opts.template]\n\n    context = _get_context(opts)\n\n    # Render template with context only\n    if not opts.FILE:\n        if not context:\n            parser.print_usage(file=sys.stderr)\n            print(\"shellman: error: please specify input file(s) or context\", file=sys.stderr)\n            return 1\n        contents = _render(template, None, **context)\n        if opts.output:\n            _write(contents, opts.output)\n        else:\n            print(contents)\n        return 0\n\n    # Parse input files\n    docs: list[DocFile | DocStream] = []\n    for file in opts.FILE:\n        if file == \"-\":\n            docs.append(DocStream(sys.stdin, filename=_guess_filename(opts.output)))\n        else:\n            docs.append(DocFile(file))\n\n    # Optionally merge the parsed contents\n    if opts.merge:\n        new_filename = _guess_filename(opts.output, docs)\n        docs = [_merge(docs, new_filename)]\n\n    # If opts.output contains variables, each input has its own output\n    if opts.output and _is_format_string(opts.output):\n        for doc in docs:\n            _write(\n                _render(template, doc, **context),\n                opts.output.format(**_output_name_variables(doc)),\n            )\n    # Else, concatenate contents (no effect if already merged), then output to file or stdout\n    else:\n        contents = \"\\n\\n\\n\".join(_render(template, doc, **context) for doc in docs)\n        if opts.output:\n            _write(contents, opts.output)\n        else:\n            print(contents)\n\n    return 0\n</code></pre>"},{"location":"reference/api/#shellman.cli","title":"cli","text":"<p>Deprecated. Import directly from <code>shellman</code> instead.</p>"},{"location":"reference/api/#shellman.context","title":"context","text":"<p>Deprecated. Import directly from <code>shellman</code> instead.</p>"},{"location":"reference/api/#shellman.reader","title":"reader","text":"<p>Deprecated. Import directly from <code>shellman</code> instead.</p>"},{"location":"reference/api/#shellman.tags","title":"tags","text":"<p>Deprecated. Import directly from <code>shellman</code> instead.</p>"},{"location":"reference/api/#shellman.templates","title":"templates","text":"<p>Deprecated. Import directly from <code>shellman</code> instead.</p> <p>Modules:</p> <ul> <li> <code>filters</code>           \u2013            <p>Deprecated. Import directly from <code>shellman</code> instead.</p> </li> </ul>"},{"location":"reference/api/#shellman.templates.filters","title":"filters","text":"<p>Deprecated. Import directly from <code>shellman</code> instead.</p>"},{"location":"usage/","title":"Usage on the Command-Line","text":"<pre><code>Usage: shellman [-h] [-c CONTEXT [CONTEXT ...]]\n                [--context-file CONTEXT_FILE]\n                [-t TEMPLATE] [-m] [-o OUTPUT]\n                [FILE [FILE ...]]\n</code></pre> <p>Positional arguments:</p> <ul> <li><code>FILE</code>: path to the file(s) to read. Use - to read on standard input.</li> </ul> <p>Optional arguments:</p> <ul> <li><code>-h, --help</code>: show this help message and exit</li> <li><code>-c, --context CONTEXT [CONTEXT ...]</code>:   context to inject when rendering the template. You can   pass JSON strings or key=value pairs. Example:   <code>--context project=hello '{\"version\": [0, 3, 1]}'</code>.</li> <li><code>--context-file CONTEXT_FILE</code>:   JSON file to read context from. By default shellman   will try to read the file '.shellman.json' in the   current directory.</li> <li><code>-t, --template TEMPLATE</code>:   the Jinja2 template to use. Prefix with <code>path:</code> to   specify the path to a custom template. Available   templates: helptext, manpage, manpage.1, manpage.3,   manpage.groff, manpage.markdown, manpage.md, wikipage,   wikipage.markdown, wikipage.md</li> <li><code>-m, --merge</code>:   with multiple input files, merge their contents in the   output instead of appending (default: False).</li> <li><code>-o, --output OUTPUT</code>:   file to write to (default: stdout). You can use the   following variables in the output name: <code>{basename}</code>,   <code>{ext}</code>, <code>{filename}</code> (equal to <code>{basename}.{ext}</code>),   <code>{filepath}</code>, <code>{dirname}</code>, <code>{dirpath}</code>, and <code>{vcsroot}</code>   (git and mercurial supported). They will be populated from   each input file.</li> </ul>"},{"location":"usage/#builtin-templates","title":"Builtin templates","text":"<p>The available builtin templates are:</p> <ol> <li><code>helptext</code>: A basic help text typically printed by scripts' <code>--help</code> option.</li> <li><code>manpage</code>: A Groff (GNU Troff) formatted file, suitable for <code>man</code>.</li> <li><code>wikipage</code>: A Markdown formatted file to be used in a project's online wiki.</li> </ol>"},{"location":"usage/#custom-templates","title":"Custom templates","text":"<p>Instead of using a builtin template, you can specify the path to a custom template that you wrote:</p> <pre><code>shellman --template path:my/template\n</code></pre> <p>The given path can be absolute or relative.</p> <p>See How to write a template plugin on this wiki, and Jinja2's documentation for more information about how to write templates.</p> <p>You can also take a look at the source code for the builtin templates on GitHub.</p>"},{"location":"usage/#examples","title":"Examples","text":""},{"location":"usage/#basic-usage","title":"Basic usage","text":"<p>Simply pass the path to your script to shellman:</p> <pre><code>shellman my_script\n</code></pre> <p>The default template is <code>helptext</code>, so the previous example is equivalent to:</p> <pre><code>shellman --template helptext my_script\n</code></pre> <p>Instead of using the shell's redirection (<code>&gt;</code>, <code>&gt;&gt;</code>), you can pass the output path to the <code>-o, --output</code> option:</p> <pre><code>shellman -t wikipage lib/base.sh -o ./wiki/base.sh.md\n</code></pre>"},{"location":"usage/#previewing-a-man-page","title":"Previewing a man page","text":"<p>Here is a simple trick to see how the man page would look using man:</p> <pre><code>man &lt;(shellman -t manpage my_script)\n</code></pre>"},{"location":"usage/#multiple-input-files","title":"Multiple input files","text":"<p>You can of course use shellman in a loop:</p> <pre><code>for file in lib/*; do\n  shellman $f\ndone\n</code></pre> <p>...but this would be inefficient because of the process' starting time being repeated for each file.</p> <p>The most efficient way is to pass the list of files directly as argument to shellman.</p> <pre><code>shellman lib/*\n</code></pre>"},{"location":"usage/#using-variable-output-name","title":"Using variable output name","text":"<p>This is especially useful when passing multiple files as input. The available variables are <code>{basename}</code>, <code>{ext}</code>, <code>{filename}</code> (equal to <code>{basename}.{ext}</code>), <code>{filepath}</code>, <code>{dirname}</code>, <code>{dirpath}</code> and <code>{vcsroot}</code>.</p> <pre><code>shellman -t wikipage lib/* -o ./wiki/{filename}.md\n</code></pre>"},{"location":"usage/#merging-contents-of-multiple-files","title":"Merging contents of multiple files","text":"<p>By default, each input file is rendered separately, but you can ask shellman to merge the contents of multiple files before rendering. It is done with the <code>-m, --merge</code> option:</p> <pre><code>shellman -m lib/* -o ./wiki/all_libs.md\n</code></pre> <p>It can be useful if you want to generate a single documentation page from code that is split across multiple files.</p> <p>Without the <code>-m</code> option, rendered contents for each input file is appended in the output file:</p> <pre><code>brief, desc, usage, ... for script 1\nbrief, desc, usage, ... for script 2\n...\nbrief, desc, usage, ... for script n\n</code></pre>"},{"location":"usage/#using-shellman-with-find","title":"Using shellman with find","text":"<p>Let say you have a directory containing multiple git repositories. Each one of these repositories has a <code>lib</code> folder with shell libraries inside. You want to generate the man pages for each library file and output them in the respective man directories.</p> <pre><code>shellman $(find my_dir -regex '.*/lib/.*\\.sh') \\\n  --template manpage \\\n  --output {vcsroot}/man/{filename}.3\n</code></pre>"},{"location":"usage/#using-shellman-with-find-and-xargs","title":"Using shellman with find and xargs","text":"<p>If you have thousands of file to treat, the previous command could be too long for the interpreter. A solution is to split the command with xargs, treating 50 files at a time.</p> <pre><code>find big_project -iname \"*.sh\" | xargs -n 50 \\\n  shellman -twikipage -o big_project/wiki/{filename}.md\n</code></pre>"},{"location":"usage/#using-shellman-in-a-makefile","title":"Using shellman in a Makefile","text":"<p>If you are using a Makefile for your project, it could be interesting to add rules to (re)generate the documentation files when scripts or libraries have been updated. Here is an example of Makefile using shellman to update man pages and wiki pages:</p> <pre><code># Declare project structure\nBINDIR := bin\nLIBDIR := lib\nMANDIR := man\nWIKIDIR := wiki\n\n# List scripts and libraries\nSCRIPTS := $(sort $(shell cd $(BINDIR) &amp;&amp; ls))\nLIBRARIES := $(sort $(shell cd $(LIBDIR) &amp;&amp; ls))\n\n# Declare related man pages and wikipages\nMANPAGES := $(addprefix $(MANDIR)/,$(addsuffix .1,$(SCRIPTS)) $(addsuffix .3,$(LIBRARIES)))\nWIKIPAGES := $(addprefix $(WIKIDIR)/,$(addsuffix .md,$(SCRIPTS)) $(addsuffix .md,$(LIBRARIES)))\n\n# Each man(1) page depends on its respective script\n$(MANDIR)/%.1: $(BINDIR)/%\n    shellman -tmanpage $&lt; -o $@\n\n# Each man(3) page depends on its respective library\n$(MANDIR)/%.sh.3: $(LIBDIR)/%.sh\n    shellman -tmanpage $&lt; -o $@\n\n# Each script wiki page depends on its respective script\n$(WIKIDIR)/%.md: $(BINDIR)/%\n    shellman -twikipage $&lt; -o $@\n\n# Each library wiki page depends on its respective library\n$(WIKIDIR)/%.sh.md: $(LIBDIR)/%.sh\n    shellman -twikipage $&lt; -o $@\n\nman: $(MANPAGES)\n\nwiki: $(WIKIPAGES)\n\ndoc: man wiki\n</code></pre>"},{"location":"usage/#playing-with-context","title":"Playing with context","text":"<p>When you render a template, you can change the values of the variables by injecting \"context\". What we call context here is simply a nested key-value list. There are three ways to inject extra context in a template:</p> <ol> <li>with command-line arguments</li> <li>with environment variables</li> <li>with a JSON file</li> </ol> <p>The order of precedence is the same: CLI arguments have priority over environment variables, which have priority over JSON file context.</p>"},{"location":"usage/#passing-context-with-command-line-arguments","title":"Passing context with command-line arguments","text":"<p>The option to pass context is <code>-c</code> or <code>--context</code>. It accepts one or more positional arguments. These positional arguments can have two forms: a JSON-formatted string or a KEY=VALUE string. The KEY part can be dot-separated to declare a nested item. The VALUE part will always be a string.</p> <p>Here are a few examples:</p> <pre><code># These two examples are equivalent\nshellman my_script --context '{\"filename\": \"My Script\"}'\nshellman my_script --context filename=\"My Script\"\n</code></pre> <pre><code># These two examples are NOT equivalent\nshellman my_script --context '{\"number\": 0}'  # number is integer\nshellman my_script --context number=0  # number is string\n</code></pre> <pre><code># These two examples are equivalent\nshellman my_script -c '{\"some\": {\"nested\": {\"item\": \"value\"}}}'\nshellman my_script -c some.nested.item=value\n</code></pre> <p>The context is recursively updated with each argument, so you can add values to dictionaries without erasing them.</p> <pre><code>shellman my_script -c some.nested.item=value '{\"some\": {\"other\": {\"item\": 1}}}' some.hello=world\n</code></pre> <pre><code>{\n  \"some\": {\n    \"nested\": {\n      \"item\": \"value\"\n    },\n    \"other\": {\n      \"item\": 1\n    },\n    \"hello\": \"world\"\n  }\n}\n</code></pre> <p>But of course, if you redefine the dictionary itself, all previous contents are lost:</p> <pre><code>shellman my_script -c some.nested.item=value some=hello\n</code></pre> <pre><code>{\n  \"some\": \"hello\"\n}\n</code></pre>"},{"location":"usage/#passing-context-with-environment-variables","title":"Passing context with environment variables","text":"<p>Environment variables prefixed with <code>SHELLMAN_CONTEXT_</code> will be used to update the context.</p> <pre><code>SHELLMAN_CONTEXT_HELLO=world shellman my_script\n</code></pre> <pre><code>{\n  \"hello\": \"world\"\n}\n</code></pre> <p>As explained above, CLI arguments override environment variables.</p> <pre><code>SHELLMAN_CONTEXT_HELLO=world shellman my_script -c hello=universe\n</code></pre> <pre><code>{\n  \"hello\": \"universe\"\n}\n</code></pre> <p>There is currently no way to pass nested items with environment variables:</p> <pre><code>SHELLMAN_CONTEXT_SOME_NESTED_ITEM=value shellman my_script\n</code></pre> <pre><code>{\n  \"some_nested_item\": \"value\"\n}\n</code></pre>"},{"location":"usage/#passing-context-with-a-json-file","title":"Passing context with a JSON file","text":"<p>By default, <code>shellman</code> will try to read context from a file in the current directory called <code>.shellman.json</code>. You can specify another file with the <code>--context-file</code> option.</p> <pre><code>shellman my_script --context-file ./context/special.json\n</code></pre>"},{"location":"usage/plugins/","title":"Write a template plugin","text":"<p>To show how to write a template plugin, we will create a new, minimal Python package.</p> <p>Its structure will be like the following:</p> <pre><code>.\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 src\n \u00a0\u00a0 \u2514\u2500\u2500 package_name\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 data\n            \u2514\u2500\u2500 my_template\n</code></pre> <p>In <code>src/package_name/__init__.py</code>, we are simply going to import the <code>Template</code> class from <code>shellman</code>, and define an instance of it:</p> <pre><code># __init__.py\n\nimport os\nfrom shellman import Template\n\ndata_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"data\")\n\nmy_template = Template(data_path, \"my_template\")\n</code></pre> <p>In <code>setup.py</code>, we then add a <code>shellman</code> entrypoint pointing to that template:</p> <pre><code># setup.py\n\nfrom setuptools import setup\n\nsetup(..., entrypoints={\"shellman\": [\"my_template_name = package_name:my_template\"]})\n</code></pre> <p>Instead of pointing to an instance of Template, you can also point to a dictionary of templates. This is useful if you want to set aliases for the same template (like <code>my_template</code>, <code>my_template.md</code>, <code>my_template.markdown</code>).</p> <pre><code># __init__.py\n\nimport os\nfrom shellman import Template\n\ndata_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"data\")\n\nmy_template = Template(data_path, \"my_template\")\n\ntemplate_dict = {\n    \"my_template\": my_template,\n    \"my_template.md\": my_template,\n    \"my_template.markdown\": my_template,\n}\n</code></pre> <pre><code># setup.py\n\nfrom setuptools import setup\n\nsetup(..., entrypoints={\"shellman\": [\"unused_dict_name = package_name:template_dict\"]})\n</code></pre> <p>Similarly, you could do it with entrypoints only:</p> <pre><code># setup.py\n\nfrom setuptools import setup\n\nsetup(\n    ...,\n    entrypoints={\n        \"shellman\": [\n            \"my_template = package_name:my_template\",\n            \"my_template.md = package_name:my_template\",\n            \"my_template.markdown = package_name:my_template\",\n        ]\n    },\n)\n</code></pre>"},{"location":"usage/plugins/#the-template-itself","title":"The template itself","text":"<p>Please read Jinja2's documentation for more information about how to write templates.</p> <p>You can also take a look at the source code for the builtin templates on GitHub.</p>"},{"location":"usage/plugins/#adding-context-and-jinja-filters","title":"Adding context and Jinja filters","text":"<p>You can specify a default context and default filters to use within your template:</p> <pre><code>def do_url(obj):\n    return \"https://{}/{}/{}\".format(obj.domain, obj.namespace, obj.name)\n\n\nmy_template = Template(data_path, \"my_template\", context={\"indent\": 4}, filters={\"url\": do_url})\n</code></pre> <p>In your template, you will then have access to the <code>{{ my_object|url }}</code> filter, as well as the <code>{{ indent }}</code> variable, which could be used like <code>{{ indent * \" \" }}</code>.</p>"},{"location":"usage/syntax/","title":"Documentation syntax","text":"<p>To write your documentation, you must follow a few simple rules.</p> <ul> <li> <p>Documentation lines always begin with <code>##</code> and a space.   <pre><code>## This is a doc line.\n# This is not a doc line.\n##This is not valid because there is no space after ##.\n</code></pre></p> </li> <li> <p>Documentation lines cannot be placed at the end of instructions.   <pre><code>## This will be recognized.\n    ## Even with spaces or tabs before.\necho \"This will NOT be recognized\" ## Ignored\n</code></pre></p> </li> <li> <p>Documentation tags are available to precise the type of documentation.   Tags are always preceded with either <code>@</code> or <code>\\</code> (at or backslash).   Example:   <pre><code>## @brief This file is the README.\n## \\desc I personally prefer backslash, I find it more readable.\n</code></pre></p> </li> <li> <p>A documentation tag can have multiple lines of contents.   <pre><code>## \\bug First line.\n## Second line.\n##\n## Fourth line.\n</code></pre></p> </li> <li> <p>You can leave the first line blank though.   <pre><code>## \\bug\n## First line.\n##\n## Third line.\n</code></pre></p> </li> <li> <p>There is no restriction in the number of occurrences or number of lines per tag.   <pre><code>## \\brief Although only the first brief will be used in builtin templates...\n## \\brief ...you still can write more than one.\n</code></pre></p> </li> <li> <p>Documentation lines without tags are always attached to the previous tag.   <pre><code>## \\note This is the first note.\n\n## This is still the first note.\n## \\note This is another note.\n</code></pre></p> </li> <li> <p>Tags can have sub-tags. The best example is the <code>\\function</code> tag:   <pre><code>## \\function some prototype or else\n## \\function-brief one-line description\n## \\function-argument arg1 some argument\n</code></pre></p> </li> <li>When rendering a tag's contents as text, shellman will indent and wrap it. To prevent joining   lines that should not be joined, simply indent them with one more space or tab. Also blank   documentation lines are kept as blank lines.   <pre><code>## \\desc Starting a description.\n## Showing a list of steps:\n##\n##   - do this\n##   - and do that\n</code></pre></li> </ul> <p>That's it! You may want to take a look at the available tags now.</p>"},{"location":"usage/tags/","title":"List of supported tags","text":"<p>You will find here the list of supported tags and examples of how to use them.</p>"},{"location":"usage/tags/#author","title":"Author","text":"<p>The author tag is used to declare authors, usually one per tag.</p> <p>Syntax:</p> <pre><code>## \\author TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\author Timoth\u00e9e Mazzucotelli / @pawamoy / &lt;pawamoy@pm.me&gt;\n## \\author Another random author\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for author in shellman.doc.author %}</code></li> <li><code>{{ author.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#bug","title":"Bug","text":"<p>The bug tag is used to tell about bugs, usually one per tag, on several lines.</p> <p>Syntax:</p> <pre><code>## \\bug TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\bug Describe a bug.\n## This is typically a well-known bug that won't be fixed.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for bug in shellman.doc.bug %}</code></li> <li><code>{{ bug.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#brief","title":"Brief","text":"<p>The brief tag is used to briefly tell what the script does.</p> <p>Syntax:</p> <pre><code>## \\brief TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\brief A brief description of the script or library.\n## You can use multiple lines, but usually one is better.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for brief in shellman.doc.brief %}</code></li> <li><code>{{ brief.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#caveat","title":"Caveat","text":"<p>The caveat tag is used to tell about limitations, usually one per tag, on several lines.</p> <p>Syntax:</p> <pre><code>## \\caveat TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\caveat A limitation in your code.\n## Use as many lines as you want.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for caveat in shellman.doc.caveat %}</code></li> <li><code>{{ caveat.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#copyright","title":"Copyright","text":"<p>The copyright tag is used to declare some copyright on the file.</p> <p>Syntax:</p> <pre><code>## \\copyright TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\copyright Copyright 2018 Timoth\u00e9e Mazzucotelli.\n## You could also include the text of the license.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for copyright in shellman.doc.copyright %}</code></li> <li><code>{{ copyright.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#date","title":"Date","text":"<p>The date tag is used to declare the date of the last update/version.</p> <p>Syntax:</p> <pre><code>## \\date TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\date 2018-08-31. Or 31 Ao\u00fbt 2018.\n## It's just text, it will not be parsed as a date object. Prefer one line.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for date in shellman.doc.date %}</code></li> <li><code>{{ date.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#description","title":"Description","text":"<p>The description tag is used to write the description of the script.</p> <p>Syntax:</p> <pre><code>## \\desc TEXT...\n</code></pre> <p>Example:</p> <p><pre><code>## \\desc The big description.\n## Usually takes many lines.\n</code></pre> In templates:</p> <ul> <li>Reference: <code>{% for desc in shellman.doc.desc %}</code></li> <li><code>{{ desc.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#environment-variable","title":"Environment variable","text":"<p>The environment variable tag is used to declare the environment variables used in the script.</p> <p>Syntax:</p> <pre><code>## \\env NAME DESCRIPTION...\n</code></pre> <p>Example:</p> <pre><code>## \\env MY_VARIABLE And a short description. Or...\n\n## \\env MY_VARIABLE\n## A longer\n## description.\n\n## \\env MY_VARIABLE Actually you can mix both styles,\n## as each new line of documentation will be appended to the description\n## of the given environment variable.\n## The first word will be the variable name (everything before the first space).\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for env in shellman.doc.env %}</code></li> <li><code>{{ env.name }}</code>: the name of the environment variable (<code>MY_VARIABLE</code>).</li> <li><code>{{ env.description }}</code>: the description of the environment variable.</li> </ul>"},{"location":"usage/tags/#error","title":"Error","text":"<p>The error tag is used to write about typical errors when using the script.</p> <p>Syntax:</p> <pre><code>## \\error TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\error Just like bugs, notes, caveats...\n## An error is something the user should not do,\n## something that is considered wrong or bad practice when using your script.\n\n## If you want to document the standard error messages, or the exit status,\n## see \\stderr and \\exit.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for error in shellman.doc.error %}</code></li> <li><code>{{ error.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#example","title":"Example","text":"<p>The example tag is used to add examples of usage.</p> <p>Syntax:</p> <pre><code>## \\example BRIEF...\n[## \\example-code [LANG]\n ##   CODE...\n]\n[## \\example-description DESCRIPTION...]\n</code></pre> <p>Example:</p> <pre><code>## \\example The first line is the brief description.\n## Can span multiple lines.\n## \\example-code bash\n##   # Note the \"bash\" keyword on the previous line.\n##   # It will be used, for example, in Markdown templates, for code syntax highlighting.\n##   if this_condition; then\n##     cd this_dir &amp;&amp; do_that_thing\n##   fi\n## \\example-description Now we describe the example more seriously.\n## But you can simply skip the description if it easy enough to understand.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for example in shellman.doc.example %}</code></li> <li><code>{{ example.brief }}</code>: the brief explanation / title of the example.</li> <li><code>{{ example.code }}</code>: the code of the example.</li> <li><code>{{ example.code_lang }}</code>: the language specified after \\example-code if any.</li> <li><code>{{ example.description }}</code>: the description of what the example does.</li> </ul>"},{"location":"usage/tags/#exit-status","title":"Exit status","text":"<p>The exit status tag is used to declare what exit codes are returned, and when/why.</p> <p>Syntax:</p> <pre><code>## \\exit CODE DESCRIPTION...\n</code></pre> <p>Example:</p> <pre><code>## \\exit 0 Everything went fine.\n\n## \\exit 1 Something went wrong.\n## I don't know why, really.\n\n## \\exit 73\n## I had never encounter this exit code before!\n\n## \\exit NO_INTERNET\n## The code can also be a string.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for exit in shellman.doc.exit %}</code></li> <li><code>{{ exit.code }}</code>: the exit code.</li> <li><code>{{ exit.description }}</code>: the description of the event   (when the script exits with this code).</li> </ul>"},{"location":"usage/tags/#file","title":"File","text":"<p>The file tag is used to tell about the files used by the script.</p> <p>Syntax:</p> <pre><code>## \\file NAME DESCRIPTION...\n</code></pre> <p>Example:</p> <pre><code>## \\file /etc/super_script/default_conf.rc The default configuration file for my super script.\n\n## \\file /dev/null\n## I think you got it.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for file in shellman.doc.file %}</code></li> <li><code>{{ file.name }}</code>: the name of the file, usually its absolute path.</li> <li><code>{{ file.description }}</code>: the description of how the file is used.</li> </ul>"},{"location":"usage/tags/#function","title":"Function","text":"<p>The function tag is used to document a function.</p> <p>Syntax:</p> <pre><code>## \\function PROTOTYPE\n[## DESCRIPTION...]\n[## \\function-brief BRIEF]\n[## \\function-argument NAME DESCRIPTION]...\n[## \\function-precondition DESCRIPTION]...\n[## \\function-return CODE DESCRIPTION]...\n[## \\function-seealso TEXT]...\n[## \\function-stdin TEXT]...\n[## \\function-stderr TEXT]...\n[## \\function-stdout TEXT]...\n</code></pre> <p>For now, shellman does not support too much verbosity for the attributes: only one line can be used for each.</p> <p>Each line without a tag will be appended to the description.</p> <p>Example:</p> <pre><code>## \\function say_hello(person, hello='bonjour')\n## \\function-brief Say hello (in French by default) to the given person.\n## \\function-precondition The person you say hello to must be a human or a dog.\n## \\function-argument hello How to say hello. Default is \"bonjour\".\n## \\function-return 0 The person was not authorized to answer back.\n## \\function-return 1 The person was human.\n## \\function-return 17 The person was a good boy.\n## \\function-stdout The person's answer will be printed on standard output.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for function in shellman.doc.function %}</code></li> <li><code>{{ function.prototype }}</code>: the function prototype.</li> <li><code>{{ function.brief }}</code>: a brief explanation.</li> <li><code>{{ function.description }}</code>: a longer explanation.</li> <li><code>{{ function.arguments }}</code>: the list of arguments.</li> <li><code>{{ function.preconditions }}</code>: the list of preconditions.</li> <li><code>{{ function.return_codes }}</code>: the list of return codes.</li> <li><code>{{ function.seealso }}</code>: the list of \"see also\".</li> <li><code>{{ function.stderr }}</code>: the list of standard error messages.</li> <li><code>{{ function.stdin }}</code>: the list of standard input messages.</li> <li><code>{{ function.stdout }}</code>: the list of standard output messages.</li> </ul>"},{"location":"usage/tags/#history","title":"History","text":"<p>The history tag is used to write about the history of the project. Interesing dates, change of maintainer, etc.</p> <p>Syntax:</p> <pre><code>## \\history TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\history 2018-08-31: this example was written.\n\n## \\history Far future:\n## 2K stars on GitHub!\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for history in shellman.doc.history %}</code></li> <li><code>{{ history.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#license","title":"License","text":"<p>The license tag is used to write licensing information.</p> <p>Syntax:</p> <pre><code>## \\license TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\license ISC License\n##\n## Copyright (c) 2018, Timoth\u00e9e Mazzucotelli\n##\n## Permission to use, copy, modify, and/or distribute this software for any\n## purpose with or without fee is hereby granted, provided that the above\n## copyright notice and this permission notice appear in all copies.\n##\n## THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n## WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n## MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n## ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n## ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n## OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for license in shellman.doc.license %}</code></li> <li><code>{{ license.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#note","title":"Note","text":"<p>The note tag is used to write a note about something.</p> <p>Syntax:</p> <pre><code>## \\note TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\note If shellman does not work as expected, please file a bug on GitHub.\n## Here is the URL: https://github.com/pawamoy/shellman.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for note in shellman.doc.note %}</code></li> <li><code>{{ note.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#option","title":"Option","text":"<p>The option tag is used to document one of your script options.</p> <p>Syntax:</p> <pre><code>## \\option SIGNATURE\n## DESCRIPTION...\n[## \\option-default DEFAULT]\n[## \\option-group GROUP]\n</code></pre> <p><code>SIGNATURE</code> being <code>[short option, ][long option ][positional arguments]</code>.</p> <p>Example:</p> <pre><code>## \\option -h, --help\n## Print this help and exit.\n## \\option-group General options\n\n## \\option -c, --context CONTEXT...\n## Inject specified context into the template.\n## Context can be a KEY=VALUE string or a JSON string.\n\n## \\option --easter-egg\n## \\option-default False\n## \\option-group Experimental options\n## Activate the easter-egg.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for option in shellman.doc.option %}</code></li> <li><code>{{ option.short }}</code>: the short option if any.</li> <li><code>{{ option.long }}</code>: the long option if any.</li> <li><code>{{ option.positional }}</code>: the option's positional arguments if any.</li> <li><code>{{ option.default }}</code>: the default value of the option.</li> <li><code>{{ option.group }}</code>: the option's group.</li> <li><code>{{ option.description }}</code>: the option's description.</li> <li><code>{{ option.signature }}</code>: the option's signature.</li> </ul>"},{"location":"usage/tags/#see-also","title":"See also","text":"<p>The see also tag is used to mention other related things (websites, tools, etc.).</p> <p>Syntax:</p> <pre><code>## \\seealso TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\seealso A note about something else to look at.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for seealso in shellman.doc.seealso %}</code></li> <li><code>{{ seealso.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#standard-error","title":"Standard Error","text":"<p>The standard error tag is used to tell what is written on the standard error, and when/why.</p> <p>Syntax:</p> <pre><code>## \\stderr TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\stderr The download progression is printed on standard error.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for stderr in shellman.doc.stderr %}</code></li> <li><code>{{ stderr.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#standard-input","title":"Standard Input","text":"<p>The standard input tag is used to tell what is expected on the standard input, and when/why.</p> <p>Syntax:</p> <pre><code>## \\stdin TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\stdin Standard input expects JSON formatted text.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for stdin in shellman.doc.stdin %}</code></li> <li><code>{{ stdin.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#standard-output","title":"Standard Output","text":"<p>The standard output tag is used to tell what is written on the standard output, and when/why.</p> <p>Syntax:</p> <pre><code>## \\stdout TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\stdout This script prints your geolocation on standard output.\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for stdout in shellman.doc.stdout %}</code></li> <li><code>{{ stdout.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"usage/tags/#usage","title":"Usage","text":"<p>The usage tag is used to show how to use the script.</p> <p>Syntax:</p> <pre><code>## \\usage PROGRAM [COMMAND...]\n</code></pre> <p>Example:</p> <pre><code>## \\usage shellman [-h] [-c CONTEXT...] [--context-file FILE] [-t TEMPLATE] [-m] [-o OUTPUT] [FILE [FILE ...]]\n\n## \\usage my_script on\n## \\usage my_script off\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for usage in shellman.doc.usage %}</code></li> <li><code>{{ usage.program }}</code>: the program name (name of the executable).</li> <li><code>{{ usage.command }}</code>: the command string.</li> </ul>"},{"location":"usage/tags/#version","title":"Version","text":"<p>The version tag is used to denotate the current version of the script.</p> <p>Syntax:</p> <pre><code>## \\version TEXT...\n</code></pre> <p>Example:</p> <pre><code>## \\version 1.3.0\n</code></pre> <p>In templates:</p> <ul> <li>Reference: <code>{% for version in shellman.doc.version %}</code></li> <li><code>{{ version.text }}</code>: the text written after the tag.</li> </ul>"},{"location":"coverage/","title":"Coverage report","text":""}]}